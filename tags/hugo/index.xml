<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hugo on 空白Koobai</title><link>https://koobai.com/tags/hugo/</link><description>Recent content in Hugo on 空白Koobai</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Thu, 01 Feb 2024 22:28:55 +0800</lastBuildDate><atom:link href="https://koobai.com/tags/hugo/index.xml" rel="self" type="application/rss+xml"/><item><title>Hugo 添加链接跳转中间页</title><link>https://koobai.com/zhongjiantiaozhuan/</link><pubDate>Thu, 01 Feb 2024 22:28:55 +0800</pubDate><guid>https://koobai.com/zhongjiantiaozhuan/</guid><description>前天在老麦博客中看到&amp;quot;给Twikoo添加链接跳转中间页&amp;ldquo;博文，因为外部链接你无法确定未来某一天可能就会变成不安全链接，从而影响到自己博客。同时又见到大大的小蜗牛也是因为安全的原因，把博客评论换成了GitHub Discussions。网上也有不少的案例，因为某个链接的原因，而被请喝茶或电话让自己排查。今天在不亦乐乎那见链接也是跳转到中间页，于是请教了下怎么实现的，感谢。之后经过与 AI 的博弈，搞定。这次使用 ChatGPT 跟 Claude 都不行，说了一堆，完全不懂，最后使用 coze 搞定基本框架，然后再来回沟通逐步完善功能。估计跟它使用的 ChatGPT 4.0 接口有关。想充值 ChatGPT，奈何月费太贵了。
新建 js 文件，如：tiaozhuan.js。里面的网址为排除跳转中间页。
function checkParent(element, classNames) { while (element) { if (element.classList &amp;amp;&amp;amp; classNames.some(cn =&amp;gt; element.classList.contains(cn))) { return true; } element = element.parentElement; } return false; } var excludedClasses = [&amp;#39;talks_comments&amp;#39;,&amp;#39;tiaozhuan-button&amp;#39;]; // 添加需要排除的a标签类名class window.addEventListener(&amp;#39;load&amp;#39;, (event) =&amp;gt; { document.body.addEventListener(&amp;#39;click&amp;#39;, function(e) { let target = e.target; while (target &amp;amp;&amp;amp; target.nodeName !== &amp;#39;A&amp;#39;) { target = target.parentNode; } if (target &amp;amp;&amp;amp; target.</description></item><item><title>利用 unicode-range 属性, 提高自定义字体加载速度</title><link>https://koobai.com/unicode_range/</link><pubDate>Wed, 01 Mar 2023 00:00:00 +0000</pubDate><guid>https://koobai.com/unicode_range/</guid><description>每天折腾一点，新鲜满足感就增强点。为了各个终端显示效果能保持一致性及自己的审美爱好，网站自定义了三种字体：标题(得意黑)、正文(鸿蒙)、代码(JetBrainsMono)。效果很满意，但带来的问题就是加载速度怎么保证，特别是中文字体。虽然使用.woff2 格式可以一定程度的降低容量，但动不动就 1M 以上的大小，对加载速度还是有一定的影响，包括 CDN 的流量损耗。
想到的方法是引用大厂的 CDN，既能白嫖保证加载速度又觉得说大厂一般对字体有优化，经过一番 Google，解决了正文(鸿蒙)字体问题。但标题、代码区域的字体，国内还没找到适合白嫖的既有速度又稳定 CDN。
正苦恼之际，发现 Google 或者国内大厂字体引用方式：CSS 中都有一个 unicode-range 属性。于是，搜索一番，名称叫字符集，通俗点就是把一个字体拆分成 N 个包，显示的字体刚好在其中一个包，浏览器就只加载这一个包，而不用加载整个字体，这就能大大提高加载速度及节省 CDN 流量了。
使用方法：先搞清楚，基本中文的引用：字符集都包含哪些区间（包）。可参考：中文汉字和常见英文数字等的 unicode 编码范围，得到 Unicode 编码范围值之后，在对应字体 CSS 引用：
@font-face { unicode-range: U+4E00-9FA5,U+0025-00F0; /* 格式为U+编码范围，多个范围以&amp;#34;,&amp;#34;分开 */ } 搞定，这下就可以愉快的随意引用自定义字体了。当然使用场景很多样，详细说明、使用、CDN 引用，参考：
CSS unicode-range 特定字符使用 font-face 自定义字体
引入商用黑体字体系列整理及 CSS 字体引入
题外： 推荐下 Obsidian，知识管理笔记类软件。之前写日志要在几个不同的文本软件中切换，要么界面感觉不适合码字，适合码字了但插入一些东西总是出现各种问题。Obsidian，插件丰富，配合 WebDav 各端同步。自己就当日常记录、写博客日志使用。动手能力强的话可以直接在里面 &amp;ldquo;写&amp;ndash;上传&amp;ndash;提交&amp;rdquo; 一条龙博客发布流程。 最近不知道怎么回事，娃发烧生病好了之后复发，现在还有点咳，Eileen 也是反反复复，只能躺床上休息。自己这两天也开始咳嗽，喉咙不舒服，今天腿发酸～～。希望一家人的身体尽快健康好起来，活蹦乱跳的～～</description></item><item><title>Github 自动构建 Hugo, 并通过 Webhook 同步到宝塔指定目录</title><link>https://koobai.com/hugo_action_webhooks/</link><pubDate>Mon, 20 Feb 2023 00:00:00 +0000</pubDate><guid>https://koobai.com/hugo_action_webhooks/</guid><description>(2024.01.19晚更新) 折腾博客的乐趣就是不停的折腾，一个评论插件就搞来搞去的，为此还特意买了轻量服务器，索性也把 Hugo 搬过去。只是原先自动同步到腾讯 COS 就不可用，而且域名还指定了境外访问路径，导致更新博客的流程变得非常复杂。最终通过 Google，总算解决：本地提交 hugo 源码到 Github，自动触发构建并同步到宝塔指定的网站目录。
部署步骤流程记录下：
1. 在 Github 的 Hugo 源码仓库根目录，新建&amp;quot;.github/workflows/xxx.yml 文件，复制以下代码。作用：借助 Github Action 实现自动构建，并同步到另外一个仓库。其中 &amp;ldquo;PERSONAL_TOKEN&amp;rdquo; 为另外仓库的访问密钥；&amp;ldquo;external_repository&amp;rdquo; 为另外仓库地址。
name: Githubblog on: workflow_dispatch: push: branches: - main jobs: deploy: runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 with: submodules: true fetch-depth: 0 - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: &amp;#39;latest&amp;#39; extended: true - name: Build run: hugo --minify - name: Deploy uses: peaceiris/actions-gh-pages@v3 with: personal_token: ${{ secrets.</description></item><item><title>Hugo主题实现自适应布局, 及自定义字体</title><link>https://koobai.com/hugo_responsive_font/</link><pubDate>Sat, 28 Jan 2023 00:00:00 +0000</pubDate><guid>https://koobai.com/hugo_responsive_font/</guid><description>做事情的三分钟热度继续中，完善了博客的归档、标签云、平常观看的影视页面及文章页评论、标签等功能。由于当下移动设备为我们主要的浏览窗口，所以页面需考虑在对应的终端设备中实际的浏览体验。
简单直接的方法，在页面样式表中添加@media，并在对应的尺寸范围中完善所需的样式：
@media (max-width:700px){ /* 浏览器宽度尺寸小于700所呈现的样式 */ } @media screen and (min-width:700px) and (max-width:900px){ /* 浏览器宽度尺寸大于700小于900所呈现的样式 */ } @media (min-width:900px){ /* 浏览器宽度尺寸大于700所呈现的样式 */ } /* 根据每个页面实际的呈现需要，调整尺寸或自适应的分段需求 */ 详细参数及解释参考：利用@media screen 实现网页布局的自适应
扩展 之前文章中提到标题采用了&amp;quot;得意黑&amp;quot;开源字体，记录下如何自定义字体，在样式文件中添加：
@font-face { font-family: SmileySans; /* 名称自定义 */ src: url(&amp;#39;../fonts/SmileySans-Oblique.ttf.woff2&amp;#39;) format(&amp;#39;woff2&amp;#39;); /* 建议采用woff2格式，以降低容量大小，提高加载速度 */ } 之后在需要调用此字体的样式文件中直接使用:
body { font-family: SmileySans; } 结尾 博客所需的，整体折腾得差不多了，过程很有趣及兴奋，就连大年三十都在乐此不疲的折腾着～～。随着这个年也已过完，接下来的重点也是 2023 年重点，努力挣钱～挣钱～～挣钱～～～加油。</description></item><item><title>Hugo主题添加暗黑(夜间)模式, 并自动切换</title><link>https://koobai.com/hugo_dark/</link><pubDate>Thu, 19 Jan 2023 00:00:00 +0000</pubDate><guid>https://koobai.com/hugo_dark/</guid><description>继续完善博客主题风格，折腾过程，备份记录留档。由于自己已习惯把终端设备外观设置成自动切换浅色或深色模式，为了夜间浏览体验，博客应该支持暗黑(夜间)模式。
以 hugo 关键词搜索主题应该怎么适配，相关资料很少，尝试到绝望之际，换成了英文关键词，最终 Atanas Yonkov 的&amp;quot;Adding Dark Mode to Hugo&amp;ldquo;拯救了自己，根据其教程，添加成功。虽不完美，但已实现，纠结两个问题：
暗黑模式下，点击链接加载都会白一下再变暗。 不会根据终端设备模式自动切换，需要手动点击。 尝试搜索解决，无果。之后发现 WorkPlusFE&amp;rsquo;s Blog 的&amp;rdquo;Dark Mode&amp;ldquo;教程，又是一番折腾，最终完美解决。最简单直接方式：在 hugo 样式文件中（如：style.scss）添加
@media (prefers-color-scheme: dark) { /* 暗黑模式下css样式, 如: */ body { background: #1A1718; } } 完善暗黑模式下的样式属性之后，终端设备在深色模式下会自动调用渲染主题暗黑模式下的样式表，反之浅色模式下就调用默认样式。
扩展 当然如果要做好暗黑模式，并不是简单的反黑白，需要不断尝试样式的各个配色方案，以寻求夜间浏览的实际体验。不过图片可以采用降低透明度的方式来缓解夜间过亮刺眼的问题：
@media (prefers-color-scheme: dark) { img { filter: brightness(0.8) contrast(1.2); } } 感悟 由于自己并不懂技术，折腾博客过程中，想实现或者解决某一想法或问题时，都需要通过搜索引擎查阅大量的资料，花大把时间，最终才能勉强得以解决或者继续无解。这就是折腾过程中的乐趣，特别是实现或解决成功的那个兴奋欣慰感～～</description></item><item><title>Github自动构建Hugo, 并同步到腾讯COS, 同时刷新CDN缓存</title><link>https://koobai.com/hugo_action_tencentcos/</link><pubDate>Sun, 15 Jan 2023 00:00:00 +0000</pubDate><guid>https://koobai.com/hugo_action_tencentcos/</guid><description>博客逐步搭建完善，更新了日常使用的App、硬件页面。博客样式标题采用了&amp;quot;得意黑&amp;ldquo;开源字体。把二级域名改成一级，过程中发现 Cloudflare Pages 如果要绑定一级，须把域名的 DNS 服务器解析过去。解析之后，自己的 nas 访问变得不稳定，时不时的打不开，来来回回折腾了好几次，无解，只好改回去。 vercel 可以绑定一级，尝试之后，访问速度太慢，放弃。开始了解国内的云服务，学习到了对象储存、CDN，经过一番对比尝试，最终选择腾讯云的 COS 对象存储配合内容分发网络 CDN 搭建(主要它的 cosbrowser 界面是经过设计的 ᵔ◡ᵔ；客服也很负责，咨询问题会电话打过来详细教你如何操作)。
在了解部署过程中发现 Cyrus&amp;rsquo;s Blog 写的&amp;rdquo;自动构建 Hugo 博客部署至腾讯云对象存储 COS 并刷新 CDN&amp;ldquo;教程，一番折腾，完美。感谢作者。
备份记录下过程: (详细的注释可查看 Cyrus&amp;rsquo;s Blog)
准备工作： 到腾讯云访问管理——访问密钥——API 密钥管理中，新建一个账户：访问方式改为&amp;quot;编程访问&amp;rdquo;，用户权限添加&amp;quot;QcloudCOSDataFullControl、 QcloudCDNFullAccess&amp;quot;。完成之后将生成的 SecretId、SecretKey 复制保存。 到 Github 新建一个仓库(私有公共都行)，把自己 hugo 生成的站点源文件(不是 public 下文件)同步过去。 在刚创建的仓库——Settings——Secrets and variables——Actions，新建 SecretId、SecretKey、Bucket、 Region 四个密钥。其中 SecretId、SecretKey 为上面复制保存的，Bucket(存储桶名称)、 Region(所属地域 )在 COS 中存储桶列表中获取。 部署: 在 Github 仓库根目录，新建&amp;quot;.github/workflows&amp;quot;文件夹，并新建 xxx.yml 文件，复制以下代码到文件里。作用：借助 Github Action 实现自动部署。 name: Build and deploy # 自动触发构建 on: push: branches: - main # 构建hugo及生产静态页面 jobs: deploy: runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 with: submodules: true fetch-depth: 0 - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: &amp;#39;latest&amp;#39; extended: true - name: Build run: hugo --minify # 上传到腾讯COS存储桶 - name: Setup Python uses: actions/setup-python@v4 with: python-version: 3.</description></item></channel></rss>