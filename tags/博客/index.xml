<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>博客 on 空白Koobai</title><link>https://koobai.com/tags/%E5%8D%9A%E5%AE%A2/</link><description>Recent content in 博客 on 空白Koobai</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Tue, 30 Jan 2024 15:40:49 +0800</lastBuildDate><atom:link href="https://koobai.com/tags/%E5%8D%9A%E5%AE%A2/index.xml" rel="self" type="application/rss+xml"/><item><title>折腾博客更像是自己的精神鸦片</title><link>https://koobai.com/tossblog/</link><pubDate>Tue, 30 Jan 2024 15:40:49 +0800</pubDate><guid>https://koobai.com/tossblog/</guid><description>前两天看到说折腾博客实质上是新型电子游戏，博客服务器从 1 月初转入阿里云以后，自己就一直陆陆续续的在折腾页面布局。状态来说，自己折腾博客更像是精神鸦片，过程很嗨，一旦停下来就空虚无所事事。需找寻另外的事情来填补这逃避而空虚的心灵。
追寻最开始玩博客的目的，到现在折腾博客，似乎都是在打发时间中，或者说逃避更重要的事情中，找到了一个让你兴奋而沉浸其中的投入。当你懂得怎么调整布局，一个按钮的大小一个图标的变化一个文本颜色的选择都是折腾过程的乐趣。特别是当你折腾过程中解决了一个难题，那种兴奋感无以言表。反观对于输出内容，兴趣不大，因为无法给你带来兴奋而满足，也有可能读书太少，从小作文分数都很低。有内容输出，更多的是记录，方便未来找寻现在的记忆。
一件事情只要在自己的能力范围内，一旦愿意沉浸进去，就想好好折腾，享受其中的过程乐趣所带来的兴奋感。前两年无意中接触到机械键盘，就动手改轴下垫、换各种轴体、卫星轴加垫片等等，你说是为了有更合适的手感？可能这只是一个说服自己的理由，主要还是享受这折腾过程的兴奋感。就跟现在喜欢骑行，换链条、内外胎、脚踏、坐垫、车把等等一样，换了能带来怎么样的变化？对于只是休闲骑来说，并没有什么改变，但就是享受这过程的乐趣，居然自己会换胎了、会缠把带了。
填补当下的心灵空荡，需要有鸦片，折腾博客是属于金钱成本相对最低的鸦片。不像玩自行车、键盘你需要持续的金钱投入。不过这个劲一旦过了，空虚之后，可能又会回到另外的寄托，如玩自行车、玩键盘，或者重新拾起来博客，继续折腾，看看这个药效是不是还在。
现实工作一旦忙碌起来，就无需精神鸦片，工作会把你的空虚所填满。这时，博客只是一个存在互联网的一个脚印，静悄悄的躺在那里，哪天你空间、域名不续费了，足迹就开始消失。但或许哪天又需要这个鸦片来刺激你的快感，周而复始。
叨叨这么多到底要表达什么呢？嗯。。。对，我遇到了所谓的中年危机。所有事物都不关心，不关心朋友不关心外界任何事情不关心自己的负责越累越多，只想沉浸在自己的精神内耗中。知道这肯定是不行，但就想来点所谓的精神鸦片，所带来的当下一时快感。
所以如果博客哪一天不折腾或不更新了，说明要么有了其他精神鸦片替代，要么开始忙碌起来了～～</description></item><item><title>图片通过 uPic 上传到 Github，然后自动同步到腾讯 COS / 又拍云 / B2</title><link>https://koobai.com/blogimg/</link><pubDate>Fri, 28 Jul 2023 16:18:05 +0800</pubDate><guid>https://koobai.com/blogimg/</guid><description>起因，自从把博客图片转移到又拍云之后，就通过 PicGo 直接上传，顺手也会再传一份到原先的多吉云，当是备份。本身这个流程没什么问题，但当看到斌仔说，他的方案是上传到 Github，再自动同步到各大存储桶。瞬间眼前一亮，我干嘛不这样呢，一次上传就行。目前博客样式或内容更新也是直接推送到Github，然后通过 Actions 自动构建及同步到各服务商，真是换了个场景就不知道了。折腾之路开始，记录留作备忘～
找了一圈多吉云的 Actions 工作流，发现没有。大大的小蜗牛推荐了一个，试用了下，可能由于太久没更新或者自己不会使用，无效，找到原作者，沟通相对困难。决定放弃多吉云，转向腾讯云的 COS ，之前博文记录过Github自动构建Hugo, 并同步到腾讯COS, 同时刷新CDN缓存，只需简单的修改下yml就行，其他具体设置参照之前的博文。
name: Sync Tencent on: workflow_dispatch: push: branches: - master paths: - &amp;#39;koobaiblog/**&amp;#39; # 目录内容有变化执行工作流 jobs: deploy: runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 with: submodules: true fetch-depth: 0 - name: Setup Python uses: actions/setup-python@v4 with: python-version: 3.9 - name: Setup coscmd and sdk run: sudo pip install coscmd - name: Configure coscmd env: SECRET_ID: ${{ secrets.SecretId }} SECRET_KEY: ${{ secrets.</description></item><item><title>博客折腾随记及 CSS Grid 属性</title><link>https://koobai.com/grid/</link><pubDate>Mon, 12 Jun 2023 15:43:33 +0800</pubDate><guid>https://koobai.com/grid/</guid><description>最近一直在不断的折腾博客，就跟唠叨里说的一样：对博客的折腾真是越折腾越来劲，一旦停下来，瞬间心里觉得空落落的。几乎把各个页面都重新梳理优化了下，特别是首页，各模块的信息流都给聚合起来了。因为更新博文的频率实在是不高，也许降低博文信息展示权重，让其首页更丰富起来，可读性更高点。
折腾过程中，ChatGPT 给出了 CSS display: grid; 属性，想起之前 风记星辰 也分享过，真是不了解不知道，一试用，发现用于并列容器的布局实在是太好用了，一直困扰我的自适应、等高等宽问题迎刃而解。索性把现有的页面全部基于 Grid 属性更改掉。其中 grid-gap 也很牛逼，不像以前用 margin-right 导致最右边的容器也会空出一定的距离。
display: grid; grid-gap: 10px; /* 中间空10px间距 */ /* grid-template-columns 各个使用方法 */ grid-template-columns: repeat(auto-fill, minmax(340px, 1fr));/* 根据浏览器窗口自适应布局，最小容器宽度340 */ grid-template-columns: auto 1fr; /* 第一列宽度根据元素宽度自适应，第二列使用剩余容器空间 */ grid-template-columns: 1fr 1fr; /* 两列等宽 */ grid-template-columns: repeat(4, 1fr); /* 多列等宽，4为平均分为四列 */ 现在折腾博客是完全离不开 ChatGPT 了，数据分离、交互动画、随机调用、布局样式，都通过它来实现，只要你多问几次或者完善对话语句，基本上都能给到你想要的答案。真是做到每个页面的最终呈现，都有它的贡献。自己一个完全看不懂 JS 的人，页面居然也用了不少 JS 效果。
当然有时候问着问着也烦，不想再问，始终给不到自己想要的效果。这个时候要么作罢，要么隔段时间新建窗口重新问，也许想要的答案就来了。目前使用的是免费 3.5 版本，如果 4.0 版本，估计更简单易用，特别是能访问互联网之后，期待未来～
有时候在想，这样折腾博客的意义是什么，日志没写多少，每天净搞些有的没的，内容才是重要的才对，再说折腾来折腾去，也没几个人看，图啥？嗯。。。。，开心最重要。意义就在于不停的折腾，就跟开头说的一样：一旦停下来，瞬间心里觉得空落落的。
感谢折腾过程中， 林木木 、 风记星辰 老师帮忙。同时折腾过程中，又认识了一些新朋友 小饿、linlinxing、小熊、wananaiko 、老麦、大大的小蜗牛、忆往事、归臧、叶子笔记、少岱山 等等，博客真好。</description></item><item><title>使用 ChatGPT 优雅的折腾博客</title><link>https://koobai.com/chatgpt/</link><pubDate>Wed, 22 Mar 2023 00:00:00 +0000</pubDate><guid>https://koobai.com/chatgpt/</guid><description>ChatGPT 现在铺天盖地的报道及使用，好像你不参与讨论或使用就跟不上时代一样，科技发展是真快。自己第一次使用 ChatGPT 还是去年刚推出，花了几块钱买了个虚拟手机号注册体验的，当时最大的感受就是它能结合上下文的意思来回答你，感觉很牛逼，之后就没怎么体验。今年在国内大面积出圈，也一直只是看看报道，自身并没有真正去体验使用。
由于自己并不懂技术，所以在折腾博客的时候，都是一边 Google 一边瞎搞。最近有个想实现的样式怎么组合关键词 Google 就是搜不出来，想起来 ChatGPT，用大白话一问，搞定解决。之前只是看看报道，但这一下子让我身临其境的重新认知，哇，原来是真的这么好用。 之后只要遇到问题就先尝试下 ChatGPT，基本上都能得到满意的回答，最主要的是它给出回答之后，会解释其中的原理及作用，大大提高效率的同时还能知道今后运用的方法。 当然 ChatGPT 的牛逼能力，网上说了一大堆，随着 GPT-4 发布，更是不得了。但当下能不能用到自己的工作生活中，这才是最主要的。随着 AI 的工具越来越多（如昨天晚上 Google 开始开放申请 Bard 试用），及进化程度越来越成熟，各种场景逐步的被替代，自己能做的就是拥抱变化，让自己变得更有竞争力的同时也需要懂得怎么借助越来越牛逼的 AI 为自己服务。今后可能有个职业叫“AI 训练师”。
Adobe 刚发布了 Firefly 宣传视频，除了帮你生成所需图片之外，还能在图片上以聊天的方式编辑图片，相当于 AI 帮你 P 图，这今后设计师 P 图工作完全可以交给它了～只能说牛逼。</description></item><item><title>利用 unicode-range 属性, 提高自定义字体加载速度</title><link>https://koobai.com/unicode_range/</link><pubDate>Wed, 01 Mar 2023 00:00:00 +0000</pubDate><guid>https://koobai.com/unicode_range/</guid><description>每天折腾一点，新鲜满足感就增强点。为了各个终端显示效果能保持一致性及自己的审美爱好，网站自定义了三种字体：标题(得意黑)、正文(鸿蒙)、代码(JetBrainsMono)。效果很满意，但带来的问题就是加载速度怎么保证，特别是中文字体。虽然使用.woff2 格式可以一定程度的降低容量，但动不动就 1M 以上的大小，对加载速度还是有一定的影响，包括 CDN 的流量损耗。
想到的方法是引用大厂的 CDN，既能白嫖保证加载速度又觉得说大厂一般对字体有优化，经过一番 Google，解决了正文(鸿蒙)字体问题。但标题、代码区域的字体，国内还没找到适合白嫖的既有速度又稳定 CDN。
正苦恼之际，发现 Google 或者国内大厂字体引用方式：CSS 中都有一个 unicode-range 属性。于是，搜索一番，名称叫字符集，通俗点就是把一个字体拆分成 N 个包，显示的字体刚好在其中一个包，浏览器就只加载这一个包，而不用加载整个字体，这就能大大提高加载速度及节省 CDN 流量了。
使用方法：先搞清楚，基本中文的引用：字符集都包含哪些区间（包）。可参考：中文汉字和常见英文数字等的 unicode 编码范围，得到 Unicode 编码范围值之后，在对应字体 CSS 引用：
@font-face { unicode-range: U+4E00-9FA5,U+0025-00F0; /* 格式为U+编码范围，多个范围以&amp;#34;,&amp;#34;分开 */ } 搞定，这下就可以愉快的随意引用自定义字体了。当然使用场景很多样，详细说明、使用、CDN 引用，参考：
CSS unicode-range 特定字符使用 font-face 自定义字体
引入商用黑体字体系列整理及 CSS 字体引入
题外： 推荐下 Obsidian，知识管理笔记类软件。之前写日志要在几个不同的文本软件中切换，要么界面感觉不适合码字，适合码字了但插入一些东西总是出现各种问题。Obsidian，插件丰富，配合 WebDav 各端同步。自己就当日常记录、写博客日志使用。动手能力强的话可以直接在里面 &amp;ldquo;写&amp;ndash;上传&amp;ndash;提交&amp;rdquo; 一条龙博客发布流程。 最近不知道怎么回事，娃发烧生病好了之后复发，现在还有点咳，Eileen 也是反反复复，只能躺床上休息。自己这两天也开始咳嗽，喉咙不舒服，今天腿发酸～～。希望一家人的身体尽快健康好起来，活蹦乱跳的～～</description></item><item><title>Github 自动构建 Hugo, 并通过 Webhook 同步到宝塔指定目录</title><link>https://koobai.com/hugo_action_webhooks/</link><pubDate>Mon, 20 Feb 2023 00:00:00 +0000</pubDate><guid>https://koobai.com/hugo_action_webhooks/</guid><description>(2024.01.19晚更新) 折腾博客的乐趣就是不停的折腾，一个评论插件就搞来搞去的，为此还特意买了轻量服务器，索性也把 Hugo 搬过去。只是原先自动同步到腾讯 COS 就不可用，而且域名还指定了境外访问路径，导致更新博客的流程变得非常复杂。最终通过 Google，总算解决：本地提交 hugo 源码到 Github，自动触发构建并同步到宝塔指定的网站目录。
部署步骤流程记录下：
1. 在 Github 的 Hugo 源码仓库根目录，新建&amp;quot;.github/workflows/xxx.yml 文件，复制以下代码。作用：借助 Github Action 实现自动构建，并同步到另外一个仓库。其中 &amp;ldquo;PERSONAL_TOKEN&amp;rdquo; 为另外仓库的访问密钥；&amp;ldquo;external_repository&amp;rdquo; 为另外仓库地址。
name: Githubblog on: workflow_dispatch: push: branches: - main jobs: deploy: runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 with: submodules: true fetch-depth: 0 - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: &amp;#39;latest&amp;#39; extended: true - name: Build run: hugo --minify - name: Deploy uses: peaceiris/actions-gh-pages@v3 with: personal_token: ${{ secrets.</description></item><item><title>Hugo主题实现自适应布局, 及自定义字体</title><link>https://koobai.com/hugo_responsive_font/</link><pubDate>Sat, 28 Jan 2023 00:00:00 +0000</pubDate><guid>https://koobai.com/hugo_responsive_font/</guid><description>做事情的三分钟热度继续中，完善了博客的归档、标签云、平常观看的影视页面及文章页评论、标签等功能。由于当下移动设备为我们主要的浏览窗口，所以页面需考虑在对应的终端设备中实际的浏览体验。
简单直接的方法，在页面样式表中添加@media，并在对应的尺寸范围中完善所需的样式：
@media (max-width:700px){ /* 浏览器宽度尺寸小于700所呈现的样式 */ } @media screen and (min-width:700px) and (max-width:900px){ /* 浏览器宽度尺寸大于700小于900所呈现的样式 */ } @media (min-width:900px){ /* 浏览器宽度尺寸大于700所呈现的样式 */ } /* 根据每个页面实际的呈现需要，调整尺寸或自适应的分段需求 */ 详细参数及解释参考：利用@media screen 实现网页布局的自适应
扩展 之前文章中提到标题采用了&amp;quot;得意黑&amp;quot;开源字体，记录下如何自定义字体，在样式文件中添加：
@font-face { font-family: SmileySans; /* 名称自定义 */ src: url(&amp;#39;../fonts/SmileySans-Oblique.ttf.woff2&amp;#39;) format(&amp;#39;woff2&amp;#39;); /* 建议采用woff2格式，以降低容量大小，提高加载速度 */ } 之后在需要调用此字体的样式文件中直接使用:
body { font-family: SmileySans; } 结尾 博客所需的，整体折腾得差不多了，过程很有趣及兴奋，就连大年三十都在乐此不疲的折腾着～～。随着这个年也已过完，接下来的重点也是 2023 年重点，努力挣钱～挣钱～～挣钱～～～加油。</description></item><item><title>Hugo主题添加暗黑(夜间)模式, 并自动切换</title><link>https://koobai.com/hugo_dark/</link><pubDate>Thu, 19 Jan 2023 00:00:00 +0000</pubDate><guid>https://koobai.com/hugo_dark/</guid><description>继续完善博客主题风格，折腾过程，备份记录留档。由于自己已习惯把终端设备外观设置成自动切换浅色或深色模式，为了夜间浏览体验，博客应该支持暗黑(夜间)模式。
以 hugo 关键词搜索主题应该怎么适配，相关资料很少，尝试到绝望之际，换成了英文关键词，最终 Atanas Yonkov 的&amp;quot;Adding Dark Mode to Hugo&amp;ldquo;拯救了自己，根据其教程，添加成功。虽不完美，但已实现，纠结两个问题：
暗黑模式下，点击链接加载都会白一下再变暗。 不会根据终端设备模式自动切换，需要手动点击。 尝试搜索解决，无果。之后发现 WorkPlusFE&amp;rsquo;s Blog 的&amp;rdquo;Dark Mode&amp;ldquo;教程，又是一番折腾，最终完美解决。最简单直接方式：在 hugo 样式文件中（如：style.scss）添加
@media (prefers-color-scheme: dark) { /* 暗黑模式下css样式, 如: */ body { background: #1A1718; } } 完善暗黑模式下的样式属性之后，终端设备在深色模式下会自动调用渲染主题暗黑模式下的样式表，反之浅色模式下就调用默认样式。
扩展 当然如果要做好暗黑模式，并不是简单的反黑白，需要不断尝试样式的各个配色方案，以寻求夜间浏览的实际体验。不过图片可以采用降低透明度的方式来缓解夜间过亮刺眼的问题：
@media (prefers-color-scheme: dark) { img { filter: brightness(0.8) contrast(1.2); } } 感悟 由于自己并不懂技术，折腾博客过程中，想实现或者解决某一想法或问题时，都需要通过搜索引擎查阅大量的资料，花大把时间，最终才能勉强得以解决或者继续无解。这就是折腾过程中的乐趣，特别是实现或解决成功的那个兴奋欣慰感～～</description></item><item><title>Github自动构建Hugo, 并同步到腾讯COS, 同时刷新CDN缓存</title><link>https://koobai.com/hugo_action_tencentcos/</link><pubDate>Sun, 15 Jan 2023 00:00:00 +0000</pubDate><guid>https://koobai.com/hugo_action_tencentcos/</guid><description>博客逐步搭建完善，更新了日常使用的App、硬件页面。博客样式标题采用了&amp;quot;得意黑&amp;ldquo;开源字体。把二级域名改成一级，过程中发现 Cloudflare Pages 如果要绑定一级，须把域名的 DNS 服务器解析过去。解析之后，自己的 nas 访问变得不稳定，时不时的打不开，来来回回折腾了好几次，无解，只好改回去。 vercel 可以绑定一级，尝试之后，访问速度太慢，放弃。开始了解国内的云服务，学习到了对象储存、CDN，经过一番对比尝试，最终选择腾讯云的 COS 对象存储配合内容分发网络 CDN 搭建(主要它的 cosbrowser 界面是经过设计的 ᵔ◡ᵔ；客服也很负责，咨询问题会电话打过来详细教你如何操作)。
在了解部署过程中发现 Cyrus&amp;rsquo;s Blog 写的&amp;rdquo;自动构建 Hugo 博客部署至腾讯云对象存储 COS 并刷新 CDN&amp;ldquo;教程，一番折腾，完美。感谢作者。
备份记录下过程: (详细的注释可查看 Cyrus&amp;rsquo;s Blog)
准备工作： 到腾讯云访问管理——访问密钥——API 密钥管理中，新建一个账户：访问方式改为&amp;quot;编程访问&amp;rdquo;，用户权限添加&amp;quot;QcloudCOSDataFullControl、 QcloudCDNFullAccess&amp;quot;。完成之后将生成的 SecretId、SecretKey 复制保存。 到 Github 新建一个仓库(私有公共都行)，把自己 hugo 生成的站点源文件(不是 public 下文件)同步过去。 在刚创建的仓库——Settings——Secrets and variables——Actions，新建 SecretId、SecretKey、Bucket、 Region 四个密钥。其中 SecretId、SecretKey 为上面复制保存的，Bucket(存储桶名称)、 Region(所属地域 )在 COS 中存储桶列表中获取。 部署: 在 Github 仓库根目录，新建&amp;quot;.github/workflows&amp;quot;文件夹，并新建 xxx.yml 文件，复制以下代码到文件里。作用：借助 Github Action 实现自动部署。 name: Build and deploy # 自动触发构建 on: push: branches: - main # 构建hugo及生产静态页面 jobs: deploy: runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 with: submodules: true fetch-depth: 0 - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: &amp;#39;latest&amp;#39; extended: true - name: Build run: hugo --minify # 上传到腾讯COS存储桶 - name: Setup Python uses: actions/setup-python@v4 with: python-version: 3.</description></item></channel></rss>