<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>空白Koobai</title><link>https://koobai.com/</link><description>工作生活记录、折腾备忘, 同时分享下日常使用的软件、 观看的影视、喜欢的好物等~~</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Tue, 10 Oct 2023 13:14:26 +0800</lastBuildDate><atom:link href="https://koobai.com/index.xml" rel="self" type="application/rss+xml"/><item><title>败入 2023 款迪卡侬 RC120 公路自行车过程及使用感受</title><link>https://koobai.com/decathlon_rc120/</link><pubDate>Tue, 10 Oct 2023 13:14:26 +0800</pubDate><guid>https://koobai.com/decathlon_rc120/</guid><description>随着陪闺女骑自行车的次数越来越频繁，同时又是自己锻炼很好的借口，共享单车是时候可以淘汰了（杭州的小红车骑起来不错，比一众其他平台的好骑太多，而且费用极低）。进到门店选车就两个标准，一是符合自己的审美；二是要碟刹（也是为了颜值）；当然费用得在自己的范围之内。至于是山地车还是公路车，无所谓，也不懂。</description><content:encoded><![CDATA[<img loading="lazy" decoding="async" src="https://img.koobai.com/article/rc1201.webp" alt="败入 2023 款迪卡侬 RC120 公路自行车过程及使用感受" /><p>随着陪闺女骑自行车的次数越来越频繁，同时又是自己锻炼很好的借口，共享单车是时候可以淘汰了（杭州的小红车骑起来不错，比一众其他平台的好骑太多，而且费用极低）。</p>
<p>进到门店选车就两个标准，一是符合自己的审美；二是要碟刹（也是为了颜值）；当然费用得在自己的范围之内。至于是山地车还是公路车，无所谓，也不懂。一圈看下来，发现 RC 500 全黑的展车真漂亮，还有 EDR CF 105 亮边的轮毂真帅气，但 4000 多及 13000 的价格 ~，嗯&hellip;，也就那样吧，“不好看”。目光来到旁边的银灰色 RC120，我更愿意称为水泥灰，真不错，漂亮；再看 3000 的价格，咬咬牙也能接受；试骑起来，虽然不知道公路自行车车把的正确使用方式，但车感蛮好。山地自行车看一圈，但没发现特别中意的，可能颜色都过于太花的原因，不符合我这气质。
<img loading="lazy" decoding="async" src="https://img.koobai.com/article/rc1204.webp" alt="rc120" class="img-hide" />
最终敲定 RC120，开单的时候才知道自行车居然也有尺码选择 S / M / L。展车试骑的是 S，我这身高也适合 S，但最后选择了 M 码。因为我这体重骑 S 显得比较小巧，M 就合适多了。经过两天近 70 公里的骑行，及事后查看各零件数据、公路自行车科普学习。提取 7 点聊聊整体感受：</p>
<ol>
<li>车架采用了 6061 铝合金，整车重量 22.5 斤，还是蛮轻的，比我闺女的 ST100 轻。</li>
<li>变速系统采用国产的蓝图（L-TWOO）R3 2 * 8，也不懂好坏，使用起来不错。小拨片切换小齿轮，大拨片切换大齿轮。也是第一次知道大盘能有两个变速档，不过目前骑下来，两个大盘使用小一点的内盘足够。</li>
<li>车把宽度 400 毫米，把两端往里调整一点，类似于内八形状，握起来更舒服。</li>
<li>坐垫太硬了，套了座套还是硌屁股，可能需要穿带海绵的骑行裤才行。坐管放不到最低，最低的位置还是会露出刻度。</li>
<li>如果车道上没什么人，采用下把位姿势骑行，配合前后齿轮比加大，速度相当的快，骑起来非常爽。只是时间长点，体力跟不上（胖男人的悲哀）。</li>
<li>临近上坡或红绿灯，前后齿轮切换到齿比小点的，方便腿发力及轻松起步。</li>
<li>减速刹车的时候，不刹死的前提下，能听到前后碟刹有刹车摩擦的声音，有点不爽。问了售后技术，说是正常。</li>
</ol>
<p><img loading="lazy" decoding="async" src="https://img.koobai.com/article/rc1203.webp" alt="rc120" class="img-hide" />
其它零件如刹车盘、飞轮、轮胎、轮毂、链条等，咱也不懂，好看好用就行。车子的定位一是周末陪闺女骑行，二是晚上空的时候骑行当作是锻炼身体。所以当进到门店选到自己满意的样式之后，至于性价比或者这个价位是不是有更好的选择，以自己立马就想要的性格，其他品牌也就不考虑了。毕竟一样物品的好与不好或适不适合，自己满意喜欢才是最重要。</p>
<p>走，骑起来～～
<img loading="lazy" decoding="async" src="https://img.koobai.com/article/rc1202.webp" alt="rc120" class="img-hide" /></p>
]]></content:encoded></item><item><title>每年一游之上海 (迪士尼/天文馆/朵云书院)</title><link>https://koobai.com/travel_shanghai/</link><pubDate>Fri, 25 Aug 2023 22:22:10 +0800</pubDate><guid>https://koobai.com/travel_shanghai/</guid><description>忘记从哪年开始，两个人决定说趁闺女还小，每年尽量带她去个地方游玩下。这些年到现在不完全统计应该游了厦门、三亚、扬州、台湾、千岛湖、广州、珠海、北京等地。上海其实去了很多次，每次差不多都要到迪士尼，不过疫情之后这三年就没再去迪士尼了。有天对着自己的狗狗玩具说：“狗狗，都没带你去迪士尼玩”。这。。。明摆着的暗示，一合计，走吧。</description><content:encoded><![CDATA[<img loading="lazy" decoding="async" src="https://img.koobai.com/article/lvyou-tianweng.jpg" alt="每年一游之上海 (迪士尼/天文馆/朵云书院)" /><p>忘记从哪年开始，两个人决定说趁闺女还小，每年尽量带她去个地方游玩下。这些年到现在不完全统计应该游了厦门、三亚、扬州、台湾、千岛湖、广州、珠海、北京等地。上海其实去了很多次，每次差不多都要到迪士尼，不过疫情之后这三年就没再去迪士尼了。有天对着自己的狗狗玩具说：“狗狗，都没带你去迪士尼玩”。这。。。明摆着的暗示，一合计，走吧。。。</p>
<p>22 号晚上开车出发，途径嘉兴服务区，发现现在服务区是真豪华，整得跟商场一样，上下好几层。差不多 21 点多到酒店，计划第二天几点醒就几点吃完早餐出发。小姑娘 6 点半就醒着睡不着了，太兴奋。那就起床刷牙洗脸吃饭出发。。。
<img loading="lazy" decoding="async" src="https://img.koobai.com/article/lvyou-dsnsd.webp" alt="上海迪士尼" class="img-hide" />
玩到迪士尼乐园关门，回到车里已经是夜里 11 点，一天下来走了近 26000 步，脚都不是自己的了。小姑娘还是很厉害，比我走得更多，只是临近结束及回到车子这段路程说脚疼。但值得，开心最重要。这一天的天气也不错，没太阳，极大缓解了穿梭在路途中的暴晒。</p>
<p>之前每次来迪士尼都穿着艾莎的衣服，看着艾莎的剧场表演，有时还连续看两场。但这次不喜欢了，连艾莎的剧场不要看，看来长大了，喜好发生了变化。上午问要不要买盖章的护照，说不要，但当在商店里看到护照本子了，又想要了。买了之后，就热衷于各个地方找机器盖章，这个精神劲是真饱满。至于游乐项目，想玩的基本上都玩了一遍，除了一个想玩漂流、一个想玩过山车没玩到，主要排队时间太长，2 小时起步。只买了一个飞跃地平线的尊享卡，因为排队 3 个小时起步，连尊享卡从进去到出来也都花了 40 分钟。</p>
<p>如果说这次与前几次来迪士尼有什么不同的话，最大的感受就是小姑娘长大了。玩累了我说背下，但背不大动了，只背了一点点点路，就没力气，背不住。
<img loading="lazy" decoding="async" src="https://img.koobai.com/article/lvyou-tianwenguan.webp" alt="上海天文馆" class="img-hide" />
晚上小姑娘睡觉已是凌晨 1 点多，也太累，第二天早上 8 点多才醒，洗漱吃完早餐出发天文馆。到地方刚好赶上环幕影院买的《时间旅行》。看完都要睡着了，视觉效果很一般。还是好好的逛逛展区，效果做得是真好，可能会对小孩产生长远的爱好影响，立志于今后从事相关行业。至于我们，老婆说接受闺女是一个普娃吧，一点好奇心都没有，走马观花。哎，我不接受我不接受，但。。长大之后能养活自己就行。</p>
<p>到了 13 点多，本打算在场馆某餐厅点东西吃，服务员的态度，一言难尽。而且套餐都是预制的，微波炉里加热几分钟，评价也说非常一般。这样反而促成老婆趁这个机会搜了下其他地方，发现附近几公里有个评价不错的饭店。而且吃完还能带我们爷俩去另外一个地方晃晃。虽然展馆还没看完，但看闺女也没有太大兴趣的样子，一合计走起。。。
<img loading="lazy" decoding="async" src="https://img.koobai.com/article/lvyou-yund.webp" alt="上海天文馆" class="img-hide" />
一家广东餐馆，老婆推荐了黯然销魂饭，真心好吃。比场馆里便宜还好吃，爽。吃完之后，就来到了计划外的朵云书店（滴水湖店）。一进门，那三层楼高的整面墙书柜，看着太震撼了，而且窗外就是滴水湖，这风景，着实不错。</p>
<p>17 点左右，两天两晚的旅程愉快的结束，开始回杭。由于是在上海，也没计划多呆，想来，可以很方便的走起。</p>
<p>在上海郊区很难发现有沪 A 的油车，两天下来在路上就见过一辆，新能源的到发现不少，很有意思。沪 C 是全国唯一全时段不能进上海市区的车牌，冷知识。有可能这次驾照要被扣分，因为快到路口要转弯的时候开到了公交专用道等红绿灯，没想到转弯道在旁边。另外这次驾车，感觉心有点急，有几次差点出事情，心平气和心平气和心平气和~~</p>
]]></content:encoded></item><item><title>图片通过 uPic 上传到 Github，然后自动同步到腾讯 COS / 又拍云 / B2</title><link>https://koobai.com/blogimg/</link><pubDate>Fri, 28 Jul 2023 16:18:05 +0800</pubDate><guid>https://koobai.com/blogimg/</guid><description>起因，自从把博客图片转移到又拍云之后，就通过 PicGo 直接上传，顺手也会再传一份到原先的多吉云，当是备份。本身这个流程没什么问题，但当看到斌仔说，他的方案是上传到 Githuab，再自动同步到各大存储桶。瞬间眼前一亮，我干嘛不这样呢，一次上传就行。目前博客样式或内容更新也是直接推送到Github，然后通过 Actions 自动构建及同步到各服务商，真是换了个场景就不知道了。折腾之路开始，记录留作备忘～</description><content:encoded><![CDATA[<img loading="lazy" decoding="async" src="https://img.koobai.com/article/syncimg.svg" alt="图片通过 uPic 上传到 Github，然后自动同步到腾讯 COS / 又拍云 / B2" /><p>起因，自从把博客图片转移到又拍云之后，就通过 PicGo 直接上传，顺手也会再传一份到原先的多吉云，当是备份。本身这个流程没什么问题，但当看到斌仔说，他的方案是上传到 Github，再自动同步到各大存储桶。瞬间眼前一亮，我干嘛不这样呢，一次上传就行。目前博客样式或内容更新也是直接推送到Github，然后通过 Actions 自动构建及同步到各服务商，真是换了个场景就不知道了。折腾之路开始，记录留作备忘～</p>
<p>找了一圈多吉云的 Actions 工作流，发现没有。<a href="https://eallion.com/">大大的小蜗牛</a>推荐了一个，试用了下，可能由于太久没更新或者自己不会使用，无效，找到原作者，沟通相对困难。决定放弃多吉云，转向腾讯云的 COS ，之前博文记录过<a href="/hugo_action_tencentcos/">Github自动构建Hugo, 并同步到腾讯COS, 同时刷新CDN缓存</a>，只需简单的修改下yml就行，其他具体设置参照之前的博文。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">name: Sync Tencent
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">on:
</span></span><span class="line"><span class="cl">  workflow_dispatch:
</span></span><span class="line"><span class="cl">  push:
</span></span><span class="line"><span class="cl">    branches:
</span></span><span class="line"><span class="cl">      - master
</span></span><span class="line"><span class="cl">    paths:
</span></span><span class="line"><span class="cl">      - &#39;koobaiblog/**&#39;  # 目录内容有变化执行工作流
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">jobs:
</span></span><span class="line"><span class="cl">  deploy:
</span></span><span class="line"><span class="cl">    runs-on: ubuntu-latest
</span></span><span class="line"><span class="cl">    steps:
</span></span><span class="line"><span class="cl">      - uses: actions/checkout@v3
</span></span><span class="line"><span class="cl">        with:
</span></span><span class="line"><span class="cl">          submodules: true
</span></span><span class="line"><span class="cl">          fetch-depth: 0
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      - name: Setup Python
</span></span><span class="line"><span class="cl">        uses: actions/setup-python@v4
</span></span><span class="line"><span class="cl">        with:
</span></span><span class="line"><span class="cl">          python-version: 3.9
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      - name: Setup coscmd and sdk
</span></span><span class="line"><span class="cl">        run: sudo pip install coscmd
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      - name: Configure coscmd
</span></span><span class="line"><span class="cl">        env:
</span></span><span class="line"><span class="cl">          SECRET_ID: ${{ secrets.SecretId }}
</span></span><span class="line"><span class="cl">          SECRET_KEY: ${{ secrets.SecretKey }}
</span></span><span class="line"><span class="cl">          BUCKET: ${{ secrets.Bucket }}
</span></span><span class="line"><span class="cl">          REGION: ${{ secrets.Region }}
</span></span><span class="line"><span class="cl">        run: coscmd config -a $SECRET_ID -s $SECRET_KEY -b $BUCKET -r $REGION
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      - name: Upload to COS
</span></span><span class="line"><span class="cl">        run: coscmd upload -rfs --delete koobaiblog/ /    # 需同步的本地目录及COS目录
</span></span></code></pre></div><p>搞定腾讯云之后，开始寻找又拍云的 Actions 工作流，<a href="https://www.wangdu.site/">斌仔</a>博文里有详细的教程，但试用之后觉得不够完美，一是文件无法增量更新，另外一个是无法保持文件一致性，譬如删除了 Gtihub 下的文件，远端无法同步删除。经过一番搜索，发现<a href="https://her-cat.com/">她和她的猫</a>博文中有说到增量更新及一致性问题，但没给出具体的脚本，抱着试试看的态度跟作者联系了下，把我的强迫症给完美解决，非常感谢作者。以下是yml，其中 <code>UPYUN_BUCKET</code>、<code>OPERATOR</code>、<code>OPERATOR_PASSWORD</code> 分别是又拍云的服务名称、操作员、操作员密码。详细使用可参考作者的 <a href="https://github.com/marketplace/actions/upyun-deployer">Github</a>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">name: Sync Upyun
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">on:
</span></span><span class="line"><span class="cl">  workflow_dispatch:
</span></span><span class="line"><span class="cl">  push:
</span></span><span class="line"><span class="cl">    branches:
</span></span><span class="line"><span class="cl">      - master
</span></span><span class="line"><span class="cl">    paths:
</span></span><span class="line"><span class="cl">      - &#39;koobaiblog/**&#39;  # 目录内容有变化执行工作流
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">jobs:
</span></span><span class="line"><span class="cl">  build:
</span></span><span class="line"><span class="cl">    runs-on: ubuntu-latest
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    steps:
</span></span><span class="line"><span class="cl">      - name: Checkout Repository master branch
</span></span><span class="line"><span class="cl">        uses: actions/checkout@master
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      - name: Deploy
</span></span><span class="line"><span class="cl">        uses: her-cat/upyun-deployer@v1
</span></span><span class="line"><span class="cl">        with:
</span></span><span class="line"><span class="cl">          bucket: ${{ secrets.UPYUN_BUCKET }}
</span></span><span class="line"><span class="cl">          operator: ${{ secrets.OPERATOR }}
</span></span><span class="line"><span class="cl">          password: ${{ secrets.OPERATOR_PASSWORD }}
</span></span><span class="line"><span class="cl">          dir: koobaiblog  # 需同步的本地目录
</span></span></code></pre></div><p>Backblaze B2 同步，<code>B2_APPKEY_ID</code> <code>B2_APPKEY</code>在<a href="https://secure.backblaze.com/app_keys.htm">Application Keys</a>菜单下生成就行。要特别注意的是<code>B2_BUCKET</code>写法，完整的写法是<code>b2://xxx</code>，其中xxx为存储桶名称。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">name: Sync B2
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">on:
</span></span><span class="line"><span class="cl">  workflow_dispatch:
</span></span><span class="line"><span class="cl">  push:
</span></span><span class="line"><span class="cl">    branches:
</span></span><span class="line"><span class="cl">      - master
</span></span><span class="line"><span class="cl">    paths:
</span></span><span class="line"><span class="cl">      - &#39;koobaiblog/**&#39;  # 目录内容有变化执行工作流
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">jobs:
</span></span><span class="line"><span class="cl">  deploy:
</span></span><span class="line"><span class="cl">    runs-on: ubuntu-latest
</span></span><span class="line"><span class="cl">    steps:
</span></span><span class="line"><span class="cl">    - uses: actions/checkout@master
</span></span><span class="line"><span class="cl">    - uses: jakejarvis/backblaze-b2-action@master
</span></span><span class="line"><span class="cl">      env:
</span></span><span class="line"><span class="cl">        SOURCE_DIR: &#39;./koobaiblog&#39;  # 需同步的本地目录
</span></span><span class="line"><span class="cl">        B2_BUCKET: ${{ secrets.B2_BUCKET }}
</span></span><span class="line"><span class="cl">        B2_APPKEY_ID: ${{ secrets.B2_APPKEY_ID }}
</span></span><span class="line"><span class="cl">        B2_APPKEY: ${{ secrets.B2_APPKEY }}
</span></span></code></pre></div><p>找寻各个解决方案的过程中，试用了下<a href="https://nuoea.com/">归臧</a>的方案<code>Lsky</code>图床，发现只能同步到一个存储策略，更适合作为图片管理使用。还搜索到<code>ZFile</code>存储程序，支持多吉云，试用了下，每次也只能同步到一个存储策略，在 Github 中向作者提了Issues建议，能不能增加一次上传，同步到多平台存储选项，明确答复未来不支持。还发现<code>Picsee</code>，图片管理工具，支持同步到各大平台存储桶，但自己已经有<code>Eagle</code>了。</p>
<p>为什么选择<code>uPic</code>收费软件而不用开源免费的<code>PicGo</code>？主要就是界面跟图标好看😂，另外一个是基于 Mac 原生开发。试用下来也非常好用，喜欢它通过设置快捷键快速上传。具体使用可参考各自的文档 <a href="https://github.com/gee1k/uPic">uPic</a>、<a href="https://picgo.github.io/PicGo-Doc/zh/guide/">PicGO</a>。</p>
<p>为什么要同步到多平台？数据多重备份总归是好的，另外就是一旦有这个想法之后，你不搞定这个 Actions，心里很难受。<code>腾讯 COS</code>会不会很贵？本来一共也就十几兆，一个 G 的量也就几块钱，可忽略不计。<code>又拍云</code>可申请联盟，每月免费 10G 存储及 15G 的 CDN。<code>Backblaze B2</code>每月免费 10G 存储及每天 1G 的流量，如果套壳 Cloudflare，流量个人使用等于不要钱。折腾的乐趣，就在于不停的折腾～</p>
]]></content:encoded></item><item><title>信息获取推荐及价值</title><link>https://koobai.com/information/</link><pubDate>Sun, 25 Jun 2023 20:33:50 +0800</pubDate><guid>https://koobai.com/information/</guid><description>进入移动互联网时代之后，每天被动或主动获取的各类信息非常多而杂。并且各大平台为了流量，绝大部分都是标题党，而且毫无价值可言，垃圾信息。为了让你沉浸其中，在平台多逗留一分钟，每家都是大数据算法，最终把你圈住。自己是一个自制力非常差的人，所以会把设备从系统层面完全隔绝各类推送，屏蔽非必要 APP 通知、不装短视频、新闻相关的 APP。</description><content:encoded><![CDATA[<img loading="lazy" decoding="async" src="https://img.koobai.com/article/information.webp" alt="信息获取推荐及价值" /><p>进入移动互联网时代之后，每天被动或主动获取的各类信息非常多而杂。并且各大平台为了流量，绝大部分都是标题党，而且毫无价值可言，垃圾信息。为了让你沉浸其中，在平台多逗留一分钟，每家都是大数据算法，最终把你圈住。自己是一个自制力非常差的人，所以会把设备从系统层面完全隔绝各类推送，屏蔽非必要 APP 通知、不装短视频、新闻相关的 APP。</p>
<p>自己主要还是以主动的方式去获取信息，当然虽说是主动，但其实当你去关注某个 UP 主或者说大 V 的时候，其实有一部分也是平台根据你的喜好来推荐。不过目前获取信息渠道主要控制在<strong>微博、Youtube、Reeder</strong>。微博用的第三方 VVebo，Youtube 使用印度区会员，Reeder 阅读器买断。主要的目的是尽可能的减少广告、不必要的算法推荐，来更纯粹及集中的获取信息。</p>
<p>日常关注的一些 UP 主或专题：</p>
<ol>
<li><a href="https://www.youtube.com/@dacongmovie" target="_blank">大聪看电影</a>，影视解说，声音跟解说风格都非常喜欢。<a href="https://weibo.com/u/6100165591" target="_blank">刘老师说电影</a>，解说风格偏幽默。<a href="https://weibo.com/u/1303413073" target="_blank">发条张的野馄饨摊儿</a>，偏长视频解说。现在看完影视，不看下解说，很多彩蛋及幕后故事是真发现不了。<a href="https://www.xiaoyuzhoufm.com/podcast/5e280fb1418a84a0461fc58c" target="_blank">硬核说</a>，影视播客，有趣的两个主持人。</li>
<li><a href="https://www.youtube.com/@user-lk3gk5sd7n" target="_blank">先看评测</a>，硬件产品评测，严谨专业。<a href="https://www.youtube.com/@zhongwenze" target="_blank">钟文泽</a>，数码产品评测，说话风格偏有趣。<a href="https://weibo.com/u/1192966660" target="_blank">韩路</a>，汽车相关，喜欢他的韩路游记节目。<a href="https://www.youtube.com/@AkilaZhang" target="_blank">电丸科技AK</a>，科技话题，专业。<a href="https://www.youtube.com/@mediastorm6801" target="_blank">影视飓风</a>，画质很专业，及喜欢他的一些行业幕后。</li>
<li><a href="https://www.youtube.com/@user-nc9xp1tb1u" target="_blank">睡前消息</a>，社会新闻评论。<a href="https://www.youtube.com/@xiaodaodalang" target="_blank">小岛大浪吹</a>，历史或新闻评论。<a href="https://weibo.com/u/5649624264" target="_blank">王骁Albert</a>，海外国家讲解。</li>
<li><a href="https://www.huxiu.com/club/1000.html?object_type=51&object_id=1" target="_blank">虎嗅早报</a>，<a href="https://sspai.com/tag/%E6%B4%BE%E6%97%A9%E6%8A%A5" target="_blank">派早报</a>，<a href="https://www.ifanr.com/category/ifanrnews" target="_blank">iFanr 早报</a>，每早rss推送，快速了解下时下互联网、科技、社会新闻。</li>
</ol>
<p>自己经历过找工作还是通过报纸打电话的时代，到如今每个人都可以成为信息发布、传播者。如果不加以筛选、过滤，就会浸泡在各个算法推荐中，等你回过神来，时间已到半夜。说好的陪陪孩子、推进下工作进度、看看书、看部影视，又得说，明天再说。一复一日的这样消耗着。</p>
<p>当你忙完一天回到家里，打开微博，看着时间线还停留在早上起床时间，赶紧刷新下一天中你都错过了什么。发现哪个明星塌房了、哪里出现安全隐患、地铁出现偷拍……。好像你错过了很多，但对你的影响是？少了聊天话题还是……？</p>
<p>我爱世界，希望世界和平，努力想办法有“砖搬”，让亲人不会因为你的能力问题导致生活水平下降，加油～</p>
]]></content:encoded></item><item><title>博客折腾随记及 CSS Grid 属性</title><link>https://koobai.com/grid/</link><pubDate>Mon, 12 Jun 2023 15:43:33 +0800</pubDate><guid>https://koobai.com/grid/</guid><description>最近一直在不断的折腾博客，就跟唠叨里说的一样：对博客的折腾真是越折腾越来劲，一旦停下来，瞬间心里觉得空落落的。几乎把各个页面都重新梳理优化了下，特别是首页，各模块的信息流都给聚合起来了。因为更新博文的频率实在是不高，也许降低博文信息展示权重，让其首页更丰富起来，可读性更高点。</description><content:encoded><![CDATA[<img loading="lazy" decoding="async" src="https://img.koobai.com/article/grid.webp" alt="博客折腾随记及 CSS Grid 属性" /><p>最近一直在不断的折腾博客，就跟唠叨里说的一样：对博客的折腾真是越折腾越来劲，一旦停下来，瞬间心里觉得空落落的。几乎把各个页面都重新梳理优化了下，特别是首页，各模块的信息流都给聚合起来了。因为更新博文的频率实在是不高，也许降低博文信息展示权重，让其首页更丰富起来，可读性更高点。</p>
<p>折腾过程中，ChatGPT 给出了 CSS display: grid; 属性，想起之前 <a href="https://www.thyuu.com/word/tips/75680" target="_blank">风记星辰</a> 也分享过，真是不了解不知道，一试用，发现用于并列容器的布局实在是太好用了，一直困扰我的自适应、等高等宽问题迎刃而解。索性把现有的页面全部基于 Grid 属性更改掉。其中 grid-gap 也很牛逼，不像以前用 margin-right 导致最右边的容器也会空出一定的距离。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-css" data-lang="css"><span class="line"><span class="cl"><span class="nt">display</span><span class="o">:</span> <span class="nt">grid</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="nt">grid-gap</span><span class="o">:</span> <span class="nt">10px</span><span class="o">;</span> <span class="c">/* 中间空10px间距 */</span>
</span></span><span class="line"><span class="cl"><span class="c">/* grid-template-columns 各个使用方法 */</span>
</span></span><span class="line"><span class="cl"><span class="nt">grid-template-columns</span><span class="o">:</span> <span class="nt">repeat</span><span class="o">(</span><span class="nt">auto-fill</span><span class="o">,</span> <span class="nt">minmax</span><span class="o">(</span><span class="nt">340px</span><span class="o">,</span> <span class="nt">1fr</span><span class="o">));</span><span class="c">/* 根据浏览器窗口自适应布局，最小容器宽度340 */</span>
</span></span><span class="line"><span class="cl"><span class="nt">grid-template-columns</span><span class="o">:</span> <span class="nt">auto</span> <span class="nt">1fr</span><span class="o">;</span> <span class="c">/* 第一列宽度根据元素宽度自适应，第二列使用剩余容器空间 */</span>
</span></span><span class="line"><span class="cl"><span class="nt">grid-template-columns</span><span class="o">:</span> <span class="nt">1fr</span> <span class="nt">1fr</span><span class="o">;</span> <span class="c">/* 两列等宽 */</span>
</span></span><span class="line"><span class="cl"><span class="nt">grid-template-columns</span><span class="o">:</span> <span class="nt">repeat</span><span class="o">(</span><span class="nt">4</span><span class="o">,</span> <span class="nt">1fr</span><span class="o">);</span> <span class="c">/* 多列等宽，4为平均分为四列 */</span>
</span></span></code></pre></div><p>现在折腾博客是完全离不开 ChatGPT 了，数据分离、交互动画、随机调用、布局样式，都通过它来实现，只要你多问几次或者完善对话语句，基本上都能给到你想要的答案。真是做到每个页面的最终呈现，都有它的贡献。自己一个完全看不懂 JS 的人，页面居然也用了不少 JS 效果。</p>
<p>当然有时候问着问着也烦，不想再问，始终给不到自己想要的效果。这个时候要么作罢，要么隔段时间新建窗口重新问，也许想要的答案就来了。目前使用的是免费 3.5 版本，如果 4.0 版本，估计更简单易用，特别是能访问互联网之后，期待未来～</p>
<p>有时候在想，这样折腾博客的意义是什么，日志没写多少，每天净搞些有的没的，内容才是重要的才对，再说折腾来折腾去，也没几个人看，图啥？嗯。。。。，开心最重要。意义就在于不停的折腾，就跟开头说的一样：一旦停下来，瞬间心里觉得空落落的。</p>
<p>感谢折腾过程中， <a href="https://immmmm.com/" target="_blank">林木木</a> 、 <a href="https://www.thyuu.com/word/tips/75680" target="_blank">风记星辰</a> 老师帮忙。同时折腾过程中，又认识了一些新朋友 <a href="https://dongjunke.cn/" target="_blank">小饿</a>、<a href="https://linlinxing.com/" target="_blank">linlinxing</a>、<a href="https://www.saphead.cn/" target="_blank">小熊</a>、<a href="https://wananaiko.com/" target="_blank">wananaiko
</a>、<a href="https://laomai.org/" target="_blank">老麦</a>、<a href="https://eallion.com/" target="_blank">大大的小蜗牛</a>、<a href="https://zhou.ge/" target="_blank">忆往事</a>、<a href="https://nuoea.com/" target="_blank">归臧</a>、<a href="https://yzrss.com/" target="_blank">叶子笔记</a>、<a href="https://www.shaodaishan.com/" target="_blank">少岱山</a> 等等，博客真好。</p>
]]></content:encoded></item><item><title>信息流整合到 RSS 阅读软件 REEDER</title><link>https://koobai.com/reeder/</link><pubDate>Fri, 12 May 2023 23:42:30 +0800</pubDate><guid>https://koobai.com/reeder/</guid><description>重新搭建博客以来，就喜欢没事的时候去博友的站点逛逛，看看各自的生活百态。成为习惯之后，发现访问路径比较麻烦，要么从互访的评论中进入，要么就从博客集合平台进入，每次访问的时候点来点去的，其实常逛的也就那么些站点。于是想着搭建个友链页面，集中在一个地方，样式也写好了，但总觉得还是不够方便。</description><content:encoded><![CDATA[<img loading="lazy" decoding="async" src="https://img.koobai.com/article/reeder.webp" alt="信息流整合到 RSS 阅读软件 REEDER" /><p>重新搭建博客以来，就喜欢没事的时候去博友的站点逛逛，看看各自的生活百态。成为习惯之后，发现访问路径比较麻烦，要么从互访的评论中进入，要么就从博客集合平台进入，每次访问的时候点来点去的，其实常逛的也就那么些站点。于是想着搭建个友链页面，集中在一个地方，样式也写好了，但总觉得还是不够方便。包括日常获取当下信息的方式也是通过浏览器书签或各类 App 点来点去的。有天忽然间就想起了 RSS 服务，一劳永逸的都集中起来，方便又快捷。</p>
<p>搜索一圈，决定使用开源的 FreshRSS 搭建服务用于数据同步、曾经的最爱 Reeder 作为电脑端阅读器、开源的 NetNewsWire 作为 iOS 端阅读器。</p>
<p>搭建过程中还发现 RSSHub，开始没明白到底是干啥的，官网的介绍是：“RSSHub 是一个开源、简单易用、易于扩展的 RSS 生成器，可以给任何奇奇怪怪的内容生成 RSS 订阅源。RSSHub 借助于开源社区的力量快速发展中，目前已适配数百家网站的上千项内容。” 在目前大多站点不提供 RSS 输出或者无法做到精细化输出（譬如只需要某个信息流站点的某标签/板块内容），RSSHub 确实起到了非常大的作用，根据文档直接配置 RSS 链接就行。不过如果它也没提供，那就需要自己通过它编写订阅源，看了下文档，嗨，这就不是我要考虑的问题了。</p>
<p>一切准备就绪，试用了几天，发现几个问题：1. 无法通过阅读器直接刷新订阅源。2. NAS 没设置科学上网，Youtube 等订阅源无法添加到 FreshRSS。3. 通过 FreshRSS 订阅的 Youtube 频道在阅读器中无法直接播放。前面两点都解决了，第三点在 Reeder 牛逼的交互中，虽然影响不大，但这个强迫症呀。。。不爽。</p>
<p>看着 Reeder 目前提供了 iCloud 数据同步服务，同时它对 Youtube 也有优化，心想要么直接购买 Mac、iOS 两端好了，去掉中间商 FreshRSS，省得麻烦，一顿纠结，收入囊中。虽然开源的 NetNewsWire 也提供 iCloud，但交互、及界面设计 Reeder 太爱了。譬如在文章页中，左滑就是源站打开，右滑关闭。一款愉悦的 App，会让生活增添一份色彩，博客重建之初，特意搭建了个 <a href="/apps">Apps</a> 分享页面。</p>
<p>也趁着这次折腾，把自己站点 RSS 通过网上的主题模版重新梳理了下，全文可按格式段落输出了。现在不管是访问博友的站点，还是日常的信息流获取，都可以优雅且方便的随时随地享用，舒坦～</p>
]]></content:encoded></item><item><title>体验了一次群晖 NAS 的重要性</title><link>https://koobai.com/synologydrive/</link><pubDate>Fri, 05 May 2023 20:53:55 +0800</pubDate><guid>https://koobai.com/synologydrive/</guid><description>早上正准备打开昨天的项目文件继续完善，目录里找了一圈发现没有，完了，难不成自己误删了？睁大眼睛又找了几圈，呃。。。猝。转念一想，这个工作目录是实时单向同步到群晖 NAS 的，而且套件也设置了控制版本数量，心情平复很多。打开 Synology Drive，心态崩了，没发现历史版本，因为没启用回收站功能，版本控制需基于文件来，但没文件呀。。。</description><content:encoded><![CDATA[<img loading="lazy" decoding="async" src="https://img.koobai.com/article/synology_drive.webp" alt="体验了一次群晖 NAS 的重要性" /><p>早上正准备打开昨天的项目文件继续完善，目录里找了一圈发现没有，完了，难不成自己误删了？睁大眼睛又找了几圈，呃。。。猝。转念一想，这个工作目录是实时单向同步到群晖 NAS 的，而且套件也设置了控制版本数量，心情平复很多。打开 Synology Drive，心态崩了，没发现历史版本，因为没启用回收站功能，版本控制需基于文件来，但没文件呀。。。</p>
<p>虽然项目大部分已交付给甲方，但防不住有修改意见，那会没源文件，想想就抓狂。Google 了下，群晖官方文档中提示 ：Synology Drive 管理控制台中的“版本资源管理器”可以勾选“显示删除的文件”找回。文件是有了，但这里面的删除文件是最初新建的文件，也就是说文件是空白的。。。</p>
<p>没办法，开始默默计算重新做一遍需要花多长时间，同时再研究下 Synology Drive 管理控制套件，在日志中发现昨晚18点多的时候删除的文件，本打算双击查看下详情，但这一双击，卧槽！此文件的历史版本都在，下载最近的版本，啊！！！叫了一声，文件完好无缺，意外惊喜，当时就连说群晖买得值了值了。。。</p>
<p>这心情起起落落的，省下至少一天的重做时间。过后还是得总结下，为了让重要的文件更安全或者说实时的重要文件更安全：</p>
<ol>
<li>Synology Drive 的版本数量设置得多点。</li>
<li>重要目录启用回收站、回收站。可以到任务计划中设置一定周期自动删除回收站里的文件。</li>
<li>重要文件多块硬盘备份，如组 Raid 或 计划备份。当然有条件的还可以多地备份。</li>
</ol>
<p>再说一句，群晖牛逼、NAS 牛逼～。更多群晖的介绍可参考之前的日志 <a href="/synology_ds920">Synology 群晖 DS920+ 使用之旅</a></p>
]]></content:encoded></item><item><title>旧 Macbook 装双系统 Windows 11</title><link>https://koobai.com/windows11/</link><pubDate>Thu, 27 Apr 2023 22:21:25 +0800</pubDate><guid>https://koobai.com/windows11/</guid><description>这些年来一直使用 Mac 电脑，从 iMac 到 2014 款 15 寸 Macbook Pro 再到 2019 款 16 寸 Macbook Pro。不记得从什么时候开始不再使用 Windows 电脑，只记得那会使用 xp、win 7 系统。不过现实中总有那么些事情需要用到 Windows，如：企业网银、某些硬件更新。之前装个 Win 7 虚拟机临时使用下，但从微软发布 Win 11 以后，看到更现代的界面，一直想尝试看看。</description><content:encoded><![CDATA[<img loading="lazy" decoding="async" src="https://img.koobai.com/article/win11.webp" alt="旧 Macbook 装双系统 Windows 11" /><p>这些年来一直使用 Mac 电脑，从 iMac 到 2014 款 15 寸 Macbook Pro 再到 2019 款 16 寸 Macbook Pro。不记得从什么时候开始不再使用 Windows 电脑，只记得那会使用 xp、win 7 系统。不过现实中总有那么些事情需要用到 Windows，如：企业网银、某些硬件更新。之前装个 Win 7 虚拟机临时使用下，但从微软发布 Win 11 以后，看到更现代的界面，一直想尝试看看。</p>
<p>本打算继续采用虚拟机方式装 Win 11，但没成功。于是想着 14 款的 Mac 放着也是放着，直接装个双系统。实践的时候发现把事情想简单的了，由于硬件比较老旧，安装过程中遇到不少麻烦，想着再搜不到方法就放弃了，好在最终都解决。以问答形式记录下关键问题，留作备忘。</p>
<h3 id="1-使用什么工具安装">1. 使用什么工具安装？</h3>
<p>Mac 自带的“启动转换助理”软件。M系列处理器暂不支持；16 款之前还是哪年之前的 Mac 需要另外准备外置硬盘作为 Win 安装的启动盘，我的 14 款需要。</p>
<h3 id="2-安装时提示该电脑无法运行-win-11怎么办">2. 安装时提示“该电脑无法运行 Win 11”怎么办？</h3>
<p>在这个界面下，按 Shift+F10 键 ，弹出命令窗口输入“regedit”打开注册表，依次定位到：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">HKEY_LOCAL_MACHINE\SYSTEM\Setup
</span></span><span class="line"><span class="cl">创建一个名为 &#34;LabConfig&#34; 的项，在此项下创建两个 DWORD 值：
</span></span><span class="line"><span class="cl">键名“BypassTPMCheck”，赋值“00000001”
</span></span><span class="line"><span class="cl">键名“BypassSecureBootCheck”，赋值“00000001”
</span></span><span class="line"><span class="cl">保存退出
</span></span></code></pre></div><h3 id="3-安装-22h2-之后版本遇到需要连接到网络才能点击下一步怎么办">3. 安装 22H2 之后版本，遇到需要连接到网络才能点击下一步怎么办？</h3>
<p>当时因为这个差点就放弃了。在这个界面下，按 Shift+F10 键 ，弹出命令窗口输入“oobe\bypassnro”回车，系统自动重启。再到这个界面的时候，点击“下一步”左边的文字按钮“我没有网络”。</p>
<h3 id="4-安装完发现没有驱动怎么办">4. 安装完，发现没有驱动怎么办？</h3>
<p>找到安装盘的 bootcamp 文件夹，整个拷贝到安装好的 Win 系统下，点击文件夹中的 setup.exe 安装 bootcamp 软件，安装完在线更新下 bootcamp 软件。</p>
<h3 id="5-怎么激活系统原生纯净的系统从哪获取">5. 怎么激活系统？原生纯净的系统从哪获取？</h3>
<p>自动激活：<a href="https://github.com/TGSAN/CMWTAT_Digital_Edition" target="_blank">Official Site</a>。系统包iso：<a href="https://next.itellyou.cn" target="_blank">ITELLYOU</a> 或 <a href="https://tb.rg-adguard.net/public.php?lang=zh-CN" target="_blank">TechBench</a></p>
<p>装之前准备一个有线鼠标，不然过程中很不方便。装完体验下来，界面跟之前的对比漂亮非常多，至于其他的，由于是老硬件，还要啥自行车。自己平常不玩游戏，所以这些年用 Mac 习惯了，而且其他对应的设备也都是 Apple，生态的互通互动方便很多。</p>
]]></content:encoded></item><item><title>搭建个人锻炼轨迹页面</title><link>https://koobai.com/sports/</link><pubDate>Mon, 10 Apr 2023 16:47:30 +0800</pubDate><guid>https://koobai.com/sports/</guid><description>慢跑，以半个小时为基准，跑了几天之后发现除了腿酸疼之外，脚腕也不舒服。通过 conge 经验分享：初跑者的目的，一是养成习惯，二是控制野心不受伤。现在每天以15-20分钟为基准，跑不是目的，先培养习惯，让身体逐步适应锻炼。不过这几天脚腕疼得好像更厉害点，写这篇日志时脚腕在胀疼，可能跟最近走的路太多有关系，再适应适应。</description><content:encoded><![CDATA[<img loading="lazy" decoding="async" src="https://img.koobai.com/article/map.webp" alt="搭建个人锻炼轨迹页面" /><p>“<a href="/body">聊聊肥胖说说状态</a>”的日志已过去十几天，基本上做到了动起来：1.每天早起跑步。2.学习游泳。3.晚上空腹。</p>
<p>慢跑，以半个小时为基准，跑了几天之后发现除了腿酸疼之外，脚腕也不舒服。通过 <a href="https://conge.livingwithfcs.org">conge</a> 经验分享：初跑者的目的，一是养成习惯，二是控制野心不受伤。现在每天以15-20分钟为基准，跑不是目的，先培养习惯，让身体逐步适应锻炼。不过这几天脚腕疼得好像更厉害点，写这篇日志时脚腕在胀疼，可能跟最近走的路太多有关系，再适应适应。</p>
<p>游泳，之前没想着游泳，Eileen 说游泳是全身运动，更容易减肥，于是在家附近找了个游泳馆，尝试看看。说起游泳还是停留在小时候放牛时学的狗刨式游法，现在真正要游，其实完全不会。于是从看教学视频开始学，目前基本上每周去2-3次，现在要说有没有学会，嗯&hellip;&hellip;还没有，继续坚持努力。</p>
<p>空腹，减肥最快的方式其实是不吃或者少吃，但咱也做不到也不健康。但零食、饮料、夜宵已完全戒掉，当然之前也不怎么吃。目前基本上保持晚上不吃晚餐，一天吃早中两餐，也算是遵循了816减肥方法。上周有几天没坚持住，继续坚持努力。</p>
<p>当然更快更科学的减肥方式是，力量训练，一天摄入的热量少于消耗的热量自然而然就瘦了。还没打算这样做，一个是如果每次吃个东西还得查这个热量多少或者运动消耗了多少热量，生活太累了。另外力量训练，如果不请教练，自己瞎折腾器材，行不行？会不会容易受伤？教练太贵。还是先让身体动起来再说，看看能不能坚持，如果不能坚持一切都是白搭。
<img loading="lazy" decoding="async" src="https://img.koobai.com/article/route.svg" alt="地图轨迹" class="img-hide" /></p>
<p>在看 <a href="https://conge.livingwithfcs.org">conge</a> 日志过程中，发现有个跑步记录的页面很不错，通过他的分享知道了<a href="https://github.com/yihong0618/running_page/blob/master/README-CN.md">running_page</a>开源项目，之后又发现<a href="https://github.com/ben-29/workouts_page">ben-29</a>基于<a href="https://github.com/yihong0618/running_page/blob/master/README-CN.md">running_page</a>项目，增加了更多的运动类型。于是搭建了个“<a href="https://workouts.koobai.com">锻炼轨迹</a>”页面，算是从另外一个维度来督促自己坚持。</p>
<p>搭建过程中折腾了很久，把一些注意点记录下，留作备忘。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">1. 绑定独立域名，修改gatsby-config文件：
</span></span><span class="line"><span class="cl">pathPrefix: process.env.PATH_PREFIX || &#39;/&#39;,  
</span></span><span class="line"><span class="cl">改为：pathPrefix: &#39;&#39;，否则会导致地图显示不出来。
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">2. 隐藏地图街道名称，修改src/utils/const.js文件：
</span></span><span class="line"><span class="cl">const ROAD_LABEL_DISPLAY = true;
</span></span><span class="line"><span class="cl">改为：const ROAD_LABEL_DISPLAY = false;
</span></span><span class="line"><span class="cl">修改地图高度：const MAP_HEIGHT = 600;
</span></span><span class="line"><span class="cl">修改轨迹透明度：const LINE_OPACITY = 1;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">3. 静态文件同步到宝塔目录，修改.github/workflows/gh-pages.yml文件
</span></span><span class="line"><span class="cl">- name: GitHub Pages
</span></span><span class="line"><span class="cl">uses: crazy-max/ghaction-github-pages@v2.2.0
</span></span><span class="line"><span class="cl">with:
</span></span><span class="line"><span class="cl">target_branch: gh-pages
</span></span><span class="line"><span class="cl">keep_history: true
</span></span><span class="line"><span class="cl">build_dir: public
</span></span><span class="line"><span class="cl">jekyll: false
</span></span><span class="line"><span class="cl">改为：
</span></span><span class="line"><span class="cl">- name: Deploy
</span></span><span class="line"><span class="cl">uses: peaceiris/actions-gh-pages@v3
</span></span><span class="line"><span class="cl">with:
</span></span><span class="line"><span class="cl">personal_token: ${{ secrets.PERSONAL_TOKEN }}
</span></span><span class="line"><span class="cl">external_repository: koobai/workouts_page
</span></span><span class="line"><span class="cl">publish_dir: ./public
</span></span><span class="line"><span class="cl">之后参考:[Github 自动构建 Hugo, 并通过 Webhook 同步到宝塔指定目录.](/hugo_action_webhooks)日志
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">4. 自定义的样式代码，合并到了 src/styles/index.scss。
</span></span><span class="line"><span class="cl">5. src/components/header/index.jsx 布局修改。
</span></span><span class="line"><span class="cl">6. src/components/pages/index.jsx 布局修改。
</span></span><span class="line"><span class="cl">7. src/components/RunTable/index.jsx 英文翻译
</span></span><span class="line"><span class="cl">8. src/utils/const.js 自定义了地图 (Mapbox) token，同时修改了页面展示说明。
</span></span></code></pre></div><p>由于有时候过敏，几年前买回来的 Watch 已基本上不带了，如今为了锻炼的时候记录，重新佩戴起来，看着每天锻炼圆环合并，挺满足。现在又多了一个佩戴理由：个人页面展示。如果问这十几天动起来之后，身体有没有什么变化，嗯&hellip;&hellip;好像还没有，继续坚持加油，总会带来自己想要的结果。</p>
<p>上面说的最多的词是坚持，为什么？因为自己做什么事情都是三分钟热度。坚持，不代表痛苦，而是对自己的一种肯定。过程中有没有痛苦，当然有，晚上不吃，看着娘俩吃香的，那个馋呀&hellip;.。但每天坚持早起动起来，发现还蛮喜欢，因为一天的时间早上是最能自己把握的。当然起床前的那一刻赖床是无法避免，但生活不就是这样～～坚持加油~~</p>
]]></content:encoded></item><item><title>聊聊肥胖说说状态</title><link>https://koobai.com/body/</link><pubDate>Tue, 28 Mar 2023 00:00:00 +0000</pubDate><guid>https://koobai.com/body/</guid><description>自己的体重导致双脚变得沉重越来越扛不住它，曾经的那个追风少年早已不在，紧随而来的是中年肥胖油腻大叔。这几年的身体体检数据也一年比一年难看，脂肪肝、甘油三酯都不用说，连血糖数据都在高位徘徊。再加上自己本身有原发性高血压，身体早已把早年间所打下的基础透支完。</description><content:encoded><![CDATA[<img loading="lazy" decoding="async" src="https://img.koobai.com/article/jiankang.svg" alt="聊聊肥胖说说状态" /><p>自己的体重导致双脚变得沉重越来越扛不住它，曾经的那个追风少年早已不在，紧随而来的是中年肥胖油腻大叔。这几年的身体体检数据也一年比一年难看，脂肪肝、甘油三酯都不用说，连血糖数据都在高位徘徊。再加上自己本身有原发性高血压，身体早已把早年间所打下的基础透支完。</p>
<p>都说一胖毁所有，看见中意的衣服，一试这啥玩意；跑两步就气踹得不行；稍微蹲下双腿就发软；就连上完厕所擦屁股都变得不利索。知道胖不好，也不是没想着去减重。跑步、饿肚子，一段时间内坚持，减下去一点，但扛不住坚持，周而复始反而变得越来越胖。就跟搞博客一样，人换了一批又一批，都在于是否坚持得住。一个人能把坚持两个字做好，99% 的事情都能有成果。而自己属于什么事情都是三分钟热度，这个劲一过，抛在脑后失去动力。
<img loading="lazy" decoding="async" src="https://img.koobai.com/article/huac.webp" alt="菜" class="img-hide" />
之前日志<a href="/time">十年弹指一挥间</a>里写到事业回到原点，随之而来的压力，导致最近自己的状态非常差，什么事情都提不起兴趣也没耐心、胡思乱想、坐在电脑前发呆、无所适从。可能近段时间捣鼓博客是唯一一件让自己抽离现实或者说逃离现实的途径。 但这样肯定不是办法，是该做出改变，突出目前的困境。先从身体状态开始，让精神保持饱满，这样才有可能换来变化。</p>
<p>03 月 16 号唠叨的时候说：“身体是越来越胖，迈不开腿，嘴又管不太住，只能从调整饮食结构开始”。从当天到现在，每天晚上的坚持，发现身体还没什么变化。看来只想通过这种捷径方式不大行，身体还得动起来：计划每天早上 7 点之前起床跑步，先动起来。看看这次能不能坚持、能不能看到身体的变化、事情能不能突出困境。
<img loading="lazy" decoding="async" src="https://img.koobai.com/article/niuxia.webp" alt="菜" class="img-hide" />
不到一米七的身高，双腿总共扛了一百七十多斤的重量。之前看到一篇博文说：让自己体重超过一百五的人是怎么想的，怎么受得了。是的，我也不知道自己是怎么就不知不觉悄无声息的就超过了。而且最近身体坐一会，左腿就发麻，不知道怎么回事。<strong>控制自己体重，是为数不多能掌握在自己手中的事情，所有的变量都在于自己。</strong></p>
<p>图片为调整饮食结构之后，每晚所吃：鸡排、牛肉、吓、花菜、黄瓜、生菜、玉米、鸡蛋等，把碳水先控制住，辛苦Elieen每晚花心思做。这两晚停了下，空腹试试～</p>
]]></content:encoded></item><item><title>使用 ChatGPT 优雅的折腾博客</title><link>https://koobai.com/chatgpt/</link><pubDate>Wed, 22 Mar 2023 00:00:00 +0000</pubDate><guid>https://koobai.com/chatgpt/</guid><description>ChatGPT 现在铺天盖地的报道及使用，好像你不参与讨论或使用就跟不上时代一样，科技发展是真快。自己第一次使用 ChatGPT 还是去年刚推出，花了几块钱买了个虚拟手机号注册体验的，当时最大的感受就是它能结合上下文的意思来回答你，感觉很牛逼，之后就没怎么体验。今年在国内大面积出圈，也一直只是看看报道，自身并没有真正去体验使用。</description><content:encoded><![CDATA[<img loading="lazy" decoding="async" src="https://img.koobai.com/article/chatgpt.webp" alt="使用 ChatGPT 优雅的折腾博客" /><p>ChatGPT 现在铺天盖地的报道及使用，好像你不参与讨论或使用就跟不上时代一样，科技发展是真快。自己第一次使用 ChatGPT 还是去年刚推出，花了几块钱买了个虚拟手机号注册体验的，当时最大的感受就是它能结合上下文的意思来回答你，感觉很牛逼，之后就没怎么体验。今年在国内大面积出圈，也一直只是看看报道，自身并没有真正去体验使用。</p>
<p>由于自己并不懂技术，所以在折腾博客的时候，都是一边 Google 一边瞎搞。最近有个想实现的样式怎么组合关键词 Google 就是搜不出来，想起来 ChatGPT，用大白话一问，搞定解决。之前只是看看报道，但这一下子让我身临其境的重新认知，哇，原来是真的这么好用。
<img loading="lazy" decoding="async" src="https://img.koobai.com/article/chatgpt2.webp" alt="ChatGPT" class="img-hide" /></p>
<p>之后只要遇到问题就先尝试下 ChatGPT，基本上都能得到满意的回答，最主要的是它给出回答之后，会解释其中的原理及作用，大大提高效率的同时还能知道今后运用的方法。
<img loading="lazy" decoding="async" src="https://img.koobai.com/article/chatgpt4.webp" alt="ChatGPT" class="img-hide" /></p>
<p>当然 ChatGPT 的牛逼能力，网上说了一大堆，随着 GPT-4 发布，更是不得了。但当下能不能用到自己的工作生活中，这才是最主要的。随着 AI 的工具越来越多（如昨天晚上 Google 开始开放申请 Bard 试用），及进化程度越来越成熟，各种场景逐步的被替代，自己能做的就是拥抱变化，让自己变得更有竞争力的同时也需要懂得怎么借助越来越牛逼的 AI 为自己服务。今后可能有个职业叫“AI 训练师”。</p>
<p>Adobe 刚发布了 Firefly 宣传视频，除了帮你生成所需图片之外，还能在图片上以聊天的方式编辑图片，相当于 AI 帮你 P 图，这今后设计师 P 图工作完全可以交给它了～只能说牛逼。</p>
]]></content:encoded></item><item><title>工作台之桌面搭配</title><link>https://koobai.com/workbench/</link><pubDate>Thu, 09 Mar 2023 00:00:00 +0000</pubDate><guid>https://koobai.com/workbench/</guid><description>2020 疫情开始从公司辞职后，一部分时间变成了在家做些项目。一开始在餐桌上对付下，时间久了，腰不行，之后就在休闲区给自己整了个工作台。到现在也 3 年时间了，感觉已形成自己一个空间，非常满意，中间还把桌子换成了升降桌，桌面整体保持着简洁干净，只是适当加点小装饰～</description><content:encoded><![CDATA[<img loading="lazy" decoding="async" src="https://img.koobai.com/article/workbench/workbench.webp" alt="工作台之桌面搭配" /><p>2020 疫情开始从公司辞职后，一部分时间变成了在家做些项目。一开始在餐桌上对付下，时间久了，腰不行，之后就在休闲区给自己整了个工作台。到现在也 3 年时间了，感觉已形成自己一个空间，非常满意，中间还把桌子换成了升降桌，桌面整体保持着简洁干净，只是适当加点小装饰～</p>
<p>白色严选升降桌 (1400x700cm)，网络流传说，升降桌买回来一般就用三次升降功能：第一次刚买回来、第二次朋友来了演示、第三次卖的时候。实际结合自身的使用频率，因人而异，自己觉得这钱花得非常值，现在大部分时间是站着干活，而且也会自然习惯的坐一会，就会抬升，交替进行，极大缓解腰疼症状。
<img loading="lazy" decoding="async" src="https://img.koobai.com/article/workbench/wangyi_zhuozi.webp" alt="严选升降桌" class="img-hide" /></p>
<p>MacBook Pro 16 2019，2020 年购入，之前还是用 2014 款的。最后一代英特尔处理器，对付自己的日常工作无问题，除了不知道为什么偶尔会触发风扇狂转，而且触控栏 Touch Bar 是真没用，买回来都三年了没使用过。整体使用非常满意，工业设计也一如既往的喜欢，不大喜欢新款的方方正正，视觉上变得更厚。
<img loading="lazy" decoding="async" src="https://img.koobai.com/article/workbench/macbookpro16.webp" alt="MacBoob Pro 16" class="img-hide" /></p>
<p>显示器飞利浦 279C9 4K27 寸，自带反向 65w 充电。由于自己的工作性质，对色准有适当的要求，显示效果还是蛮靠谱，够用，而且边框四周等宽，视觉冲击力不错。</p>
<p>上方夹了明基 ScreenBar Plus 挂灯，除了能提升夜间的照明度之外，既不占桌面，也不反光，非常喜欢。唯一的缺点就是控制器是有线的，买回来一个多月品牌就出了无线版本，嗨～。</p>
<p>在买升降桌之前，想着支架能更方便的调整显示器，以缓解颈椎，于是购入了爱格升支架。东西是好东西，只是现在有了升降桌，作用的意义不大，用得最多的就是鼠标要充电，需接线到显示器后面的 usb 接口，旋转起来非常方便。
<img loading="lazy" decoding="async" src="https://img.koobai.com/article/workbench/display_philips.webp" alt="显示器" class="img-hide" /></p>
<p>罗技 MX Master 3 鼠标，2019 年买的，除了表面脱皮及起泡外，使用起来确实很顺手。中间尝试过 MX Vertical ，想着更符合人体工程学，以改善手部疲劳，但没有 MagSpeed 电磁滚动技术，使用起来不习惯，还是 MX Master 靠谱。
<img loading="lazy" decoding="async" src="https://img.koobai.com/article/workbench/mxmaster.webp" alt="MX Master 3" class="img-hide" /></p>
<p>ZOOM 65 机械键盘，之前日志中提过，除了无线容易没电之外，还不错，现在搭配 PC 定位版、TTC 金粉轴 V2、Domikey 宇航员、Pbtfans wob 黑使用。Pbtfans 这款键帽感觉不大行，PBT 材质现在都开始磨损出油了，早买的宇航员 ABS 材质，现在还是完好无损，越看越喜欢。
<img loading="lazy" decoding="async" src="https://img.koobai.com/article/workbench/zoom65.webp" alt="ZOOM 65" class="img-hide" />
<img loading="lazy" decoding="async" src="https://img.koobai.com/article/workbench/zoom651.webp" alt="zoom 65" class="img-hide" /></p>
<p>桌上摆上几个小东西还是蛮好的一种点缀，乐高、小黄人、小米 Sound。买这个小米 Sound，只是单纯为了晚上工作时，听“钱塘夜色”广播，使工作起来带感，有想法。戴头盔的小黄人是闺女送的盲盒生日礼物，当时买的时候，就想要这款，没想到真给抽中。
<img loading="lazy" decoding="async" src="https://img.koobai.com/article/workbench/xiaohuangren1.webp" alt="小黄人" class="img-hide" /></p>
<p>桌子上还有个键盘手腕垫，凝胶填充，软软的蛮舒服，买短了点，长点更好。桌垫是小米的，800x400cm，干干净净而且锁边了，不起翘。桌子旁边放了个宜家的办公柜，金属结构，上面放了台小米激光黑白打印机，主要作用还是给闺女打印作业。旁边的椅子也是宜家的，1000 多块钱，性价比一般，买它主要是觉得外观简简单单很好看。
<img loading="lazy" decoding="async" src="https://img.koobai.com/article/workbench/workbench_quanj.webp" alt="全景" class="img-hide" /></p>
<p>之前还想过整个背景墙铺满黑色洞洞板，跟前景形成黑白反差，然后挂些好玩的物品。由于桌子改成升降的了，就觉得这样不大方便，只好放弃。每次看到桌面搭配的视频或图片都会不由自主的停留欣赏下，喜欢各自的小心思。一个满意的工作台，舒适的桌面搭配，每次走到跟前看着就是一种享受，大大增加工作心情。</p>
]]></content:encoded></item><item><title>利用 unicode-range 属性, 提高自定义字体加载速度</title><link>https://koobai.com/unicode_range/</link><pubDate>Wed, 01 Mar 2023 00:00:00 +0000</pubDate><guid>https://koobai.com/unicode_range/</guid><description>为了各个终端显示效果能保持一致性及自己的审美爱好，网站自定义了三种字体：标题(得意黑)、正文(鸿蒙)、代码(JetBrainsMono)。效果很满意，但带来的问题就是加载速度怎么保证，特别是中文字体。虽然使用.woff2 格式可以一定程度的降低容量，但动不动就 1M 以上的大小，对加载速度还是有一定的影响，包括 CDN 的流量损耗。</description><content:encoded><![CDATA[<img loading="lazy" decoding="async" src="https://img.koobai.com/article/unicode_range.webp" alt="利用 unicode-range 属性, 提高自定义字体加载速度" /><p>每天折腾一点，新鲜满足感就增强点。为了各个终端显示效果能保持一致性及自己的审美爱好，网站自定义了三种字体：标题(得意黑)、正文(鸿蒙)、代码(JetBrainsMono)。效果很满意，但带来的问题就是加载速度怎么保证，特别是中文字体。虽然使用.woff2 格式可以一定程度的降低容量，但动不动就 1M 以上的大小，对加载速度还是有一定的影响，包括 CDN 的流量损耗。</p>
<p>想到的方法是引用大厂的 CDN，既能白嫖保证加载速度又觉得说大厂一般对字体有优化，经过一番 Google，解决了正文(鸿蒙)字体问题。但标题、代码区域的字体，国内还没找到适合白嫖的既有速度又稳定 CDN。</p>
<p>正苦恼之际，发现 Google 或者国内大厂字体引用方式：CSS 中都有一个 unicode-range 属性。于是，搜索一番，名称叫字符集，通俗点就是把一个字体拆分成 N 个包，显示的字体刚好在其中一个包，浏览器就只加载这一个包，而不用加载整个字体，这就能大大提高加载速度及节省 CDN 流量了。</p>
<p>使用方法：先搞清楚，基本中文的引用：字符集都包含哪些区间（包）。可参考：<a href="https://www.zhangxinxu.com/study/201611/chinese-language-unicode-range.html" target="_blank">中文汉字和常见英文数字等的 unicode 编码范围</a>，得到 Unicode 编码范围值之后，在对应字体 CSS 引用：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-css" data-lang="css"><span class="line"><span class="cl"><span class="p">@</span><span class="k">font-face</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">unicode-range</span><span class="o">:</span> <span class="nt">U</span><span class="o">+</span><span class="nt">4E00-9FA5</span><span class="o">,</span><span class="nt">U</span><span class="o">+</span><span class="nt">0025-00F0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="c">/* 格式为U+编码范围，多个范围以&#34;,&#34;分开 */</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>搞定，这下就可以愉快的随意引用自定义字体了。当然使用场景很多样，详细说明、使用、CDN 引用，参考：<br>
<a href="https://www.zhangxinxu.com/wordpress/2016/11/css-unicode-range-character-font-face" target="_blank">CSS unicode-range 特定字符使用 font-face 自定义字体</a><br>
<a href="https://www.thyuu.com/word/tips/62610" target="_blank">引入商用黑体字体系列整理及 CSS 字体引入</a></p>
<h3 id="题外">题外：</h3>
<ol>
<li>推荐下 Obsidian，知识管理笔记类软件。之前写日志要在几个不同的文本软件中切换，要么界面感觉不适合码字，适合码字了但插入一些东西总是出现各种问题。Obsidian，插件丰富，配合 WebDav 各端同步。自己就当日常记录、写博客日志使用。动手能力强的话可以直接在里面 &ldquo;写&ndash;上传&ndash;提交&rdquo; 一条龙博客发布流程。</li>
<li>最近不知道怎么回事，娃发烧生病好了之后复发，现在还有点咳，Eileen 也是反反复复，只能躺床上休息。自己这两天也开始咳嗽，喉咙不舒服，今天腿发酸～～。希望一家人的身体尽快健康好起来，活蹦乱跳的～～</li>
</ol>
]]></content:encoded></item><item><title>智能家居使用主观感受</title><link>https://koobai.com/smart_home_xiaomi/</link><pubDate>Fri, 24 Feb 2023 00:00:00 +0000</pubDate><guid>https://koobai.com/smart_home_xiaomi/</guid><description>2018 年装修房子选灯具的时候，了解到智能家居。想着要不尝试看看，经过性价比、产品丰富度、入门简易度几个维度筛选下来，小米生态链的品牌最适合。到现在差不多四年多时间，米家里显示的设备88个，基本覆盖了日常使用设备，如：门锁、灯具、猫眼、摄像机、窗帘、扫地机、净水器、各类传感器等。</description><content:encoded><![CDATA[<img loading="lazy" decoding="async" src="https://img.koobai.com/article/home_xiaomi.webp" alt="智能家居使用主观感受" /><p>2018 年装修房子选灯具的时候，了解到智能家居。想着要不尝试看看，经过性价比、产品丰富度、入门简易度几个维度筛选下来，小米生态链的品牌最适合。到现在差不多四年多时间，米家里显示的设备 88 个，基本覆盖了日常使用设备，如：门锁、灯具、猫眼、摄像机、窗帘、扫地机、净水器、各类传感器等。</p>
<h3 id="场景">场景</h3>
<p>智能设备最优的使用方式，是各个设备之间相互联动，而不是单一独立存在。自己分别设置了不同场景：如</p>
<ol>
<li>门锁开门，指定对应的灯具自动开灯。关门，指定全屋关灯，并开启摄像机、安全网关、禁用小爱同学。</li>
<li>走入卫生间、厨房，自动开灯，5 分钟之后，感知无人自动关灯。半夜走入卫生间、厨房，开启夜灯模式。</li>
<li>早上窗帘自动打开，晚上自动关上。</li>
<li>各种小爱同学口令，如：看电视，对应灯具自动关上，并打开氛围灯、电视。睡觉，关闭灯光，并打开夜灯。</li>
</ol>
<h3 id="感受">感受</h3>
<p>解放双手双脚，怎么懒怎么来。一句小爱同学、一句嘿 Siri 随时听你的指令工作。再也不用因为忘记关灯或扫地问题，用石头剪子布来决定谁去关或扫，影响感情。也不用担心开门屋里一片漆黑、起床上厕所摸黑，需要找开关。</p>
<p>设备稳定性整体不错，偶尔几个掉线之后只需手动关开一下，就会自动连接上。当然日常使用也存在一些问题：</p>
<ol>
<li>小爱同学答非所问，你喊它开客厅灯，它回答好的，马上播放 xxx 歌曲。</li>
<li>门锁开门不自动执行场景设置，时有时无，到目前没搞明白什么原因。</li>
<li>设备基本上都必须连小米服务器才可使用，无网络或小米服务器出现问题，就全屋瘫痪。</li>
<li>上厕所或洗澡容易自动关灯，人体传感器精度不够，需要换人在传感器。</li>
</ol>
<h3 id="总结">总结</h3>
<p><img loading="lazy" decoding="async" src="https://img.koobai.com/article/home_apple.webp" alt="Smart Home" class="img-hide" />
使用的产品当中也会有为了智能而智能，并不实用，如晾衣架，还是实体开关升降符合使用预期。</p>
<p>设备几年使用下来，给生活带来了便利之外也确实提升了小幸福感。特别是一些有意思的产品，如智能马桶盖，除了改变日常清洁屁屁问题之外，冬天坐上去那个暖和的感受，再也不用一哆嗦。智能垃圾桶，自动打包自动套空袋，非常方便。但是不是必须，譬如有人说自己拖地更干净，那就仁者见仁智者见智。</p>
<p>2023 年，可选的品牌、品类越来越丰富，技术也越来越成熟，如离线使用、Apple 的 Matter 标准等等，值得尝试。</p>
]]></content:encoded></item><item><title>Github 自动构建 Hugo, 并通过 Webhook 同步到宝塔指定目录</title><link>https://koobai.com/hugo_action_webhooks/</link><pubDate>Mon, 20 Feb 2023 00:00:00 +0000</pubDate><guid>https://koobai.com/hugo_action_webhooks/</guid><description>折腾博客的乐趣就是不停的折腾，一个评论插件就搞来搞去的，为此还特意买了轻量服务器，索性也把 Hugo 搬过去。只是原先同步到腾讯 COS 就不可用，而且域名还指定了境外访问路径，导致更新博客的流程变得非常复杂。最终通过 Google，总算解决：本地提交 hugo 源码到 Github，自动触发构建并同步到宝塔指定的网站目录。</description><content:encoded><![CDATA[<img loading="lazy" decoding="async" src="https://img.koobai.com/article/webhooks2.svg" alt="Github 自动构建 Hugo, 并通过 Webhook 同步到宝塔指定目录" /><p>折腾博客的乐趣就是不停的折腾，一个评论插件就搞来搞去的，为此还特意买了轻量服务器，索性也把 Hugo 搬过去。只是原先自动同步到腾讯 COS 就不可用，而且域名还指定了境外访问路径，导致更新博客的流程变得非常复杂。最终通过 Google，总算解决：本地提交 hugo 源码到 Github，自动触发构建并同步到宝塔指定的网站目录。</p>
<p>部署步骤流程记录下：</p>
<p><strong>1.</strong> 在 Github 的 Hugo 源码仓库根目录，新建&quot;.github/workflows/xxx.yml 文件，复制以下代码。作用：借助 Github Action 实现自动构建，并同步到另外一个仓库。其中 &ldquo;PERSONAL_TOKEN&rdquo; 为另外仓库的访问密钥；&ldquo;external_repository&rdquo; 为另外仓库地址。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="line"><span class="cl"><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Githubblog</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">on</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">workflow_dispatch</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">push</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">branches</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">main</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">jobs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">deploy</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">runs-on</span><span class="p">:</span><span class="w"> </span><span class="l">ubuntu-latest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">steps</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/checkout@v3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">submodules</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">fetch-depth</span><span class="p">:</span><span class="w"> </span><span class="m">0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Setup Hugo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">peaceiris/actions-hugo@v2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">hugo-version</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;latest&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">extended</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Build</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">hugo --minify</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Deploy</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">peaceiris/actions-gh-pages@v3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">personal_token</span><span class="p">:</span><span class="w"> </span><span class="l">${{ secrets.PERSONAL_TOKEN }}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">external_repository</span><span class="p">:</span><span class="w"> </span><span class="l">koobai/koobai.github.io</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">publish_dir</span><span class="p">:</span><span class="w"> </span><span class="l">./public</span><span class="w">
</span></span></span></code></pre></div><p><strong>2.</strong> 打开宝塔面板，终端生成 git 公钥</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="line"><span class="cl"><span class="c"># Git全局配置和单个仓库的用户名邮箱配置</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="l">git config --global user.name  &#34;username&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="l">git config --global user.email  &#34;your@email.com&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 生成git公钥用于自动拉取</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="l">ssh-keygen -t rsa -C &#34;你的@email.com&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 查看git公钥</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="l">cat ~/.ssh/id_rsa.pub</span><span class="w">
</span></span></span></code></pre></div><p><strong>3.</strong> 添加公钥到到 Github：头像&ndash;Settings&ndash;SSH and GPG keys&ndash;New SSH key</p>
<p><strong>4.</strong> 打开宝塔面板商店，安装 WebHook 插件&ndash;添加执行脚本 (复制以下代码)。其中&quot;gitHttp 为需同步的 github 仓库地址&quot;，&ldquo;gh-pages&quot;为仓库分支名称。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="nb">echo</span> <span class="s2">&#34;&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1">#输出当前时间</span>
</span></span><span class="line"><span class="cl">date --date<span class="o">=</span><span class="s1">&#39;0 days ago&#39;</span> <span class="s2">&#34;+%Y-%m-%d %H:%M:%S&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;Start&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1">#git分支名称</span>
</span></span><span class="line"><span class="cl"><span class="nv">branch</span><span class="o">=</span><span class="s2">&#34;gh-pages&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1">#git项目路径</span>
</span></span><span class="line"><span class="cl"><span class="nv">gitPath</span><span class="o">=</span><span class="s2">&#34;/www/wwwroot/</span><span class="nv">$1</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1">#git 仓库地址</span>
</span></span><span class="line"><span class="cl"><span class="nv">gitHttp</span><span class="o">=</span><span class="s2">&#34;git@github.com:koobai/koobai.github.io.git&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;Web站点路径：</span><span class="nv">$gitPath</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1">#判断项目路径是否存在</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[</span> -d <span class="s2">&#34;</span><span class="nv">$gitPath</span><span class="s2">&#34;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">        <span class="nb">cd</span> <span class="nv">$gitPath</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#判断是否存在git目录</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">[</span> ! -d <span class="s2">&#34;.git&#34;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">                <span class="nb">echo</span> <span class="s2">&#34;在该目录下克隆 git&#34;</span>
</span></span><span class="line"><span class="cl">                sudo git clone <span class="nv">$gitHttp</span> gittemp
</span></span><span class="line"><span class="cl">                sudo mv gittemp/.git .
</span></span><span class="line"><span class="cl">                sudo rm -rf gittemp
</span></span><span class="line"><span class="cl">        <span class="k">fi</span>
</span></span><span class="line"><span class="cl">        <span class="nb">echo</span> <span class="s2">&#34;拉取最新的项目文件&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#sudo git reset --hard origin/$branch</span>
</span></span><span class="line"><span class="cl">        git remote add origin <span class="nv">$gitHttp</span>
</span></span><span class="line"><span class="cl">        git branch --set-upstream-to<span class="o">=</span>origin/<span class="nv">$branch</span> <span class="nv">$branch</span>
</span></span><span class="line"><span class="cl">        sudo git reset --hard origin/<span class="nv">$branch</span>
</span></span><span class="line"><span class="cl">        sudo git pull <span class="nv">$gitHttp</span>  2&gt;<span class="p">&amp;</span><span class="m">1</span>
</span></span><span class="line"><span class="cl">        <span class="nb">echo</span> <span class="s2">&#34;设置目录权限&#34;</span>
</span></span><span class="line"><span class="cl">        sudo chown -R www:www <span class="nv">$gitPath</span>
</span></span><span class="line"><span class="cl">        <span class="nb">echo</span> <span class="s2">&#34;End&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="nb">exit</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span>
</span></span><span class="line"><span class="cl">        <span class="nb">echo</span> <span class="s2">&#34;该项目路径不存在&#34;</span>
</span></span><span class="line"><span class="cl">                <span class="nb">echo</span> <span class="s2">&#34;新建项目目录&#34;</span>
</span></span><span class="line"><span class="cl">        mkdir <span class="nv">$gitPath</span>
</span></span><span class="line"><span class="cl">        <span class="nb">cd</span> <span class="nv">$gitPath</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#判断是否存在git目录</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">[</span> ! -d <span class="s2">&#34;.git&#34;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">                <span class="nb">echo</span> <span class="s2">&#34;在该目录下克隆 git&#34;</span>
</span></span><span class="line"><span class="cl">                sudo git clone <span class="nv">$gitHttp</span> gittemp
</span></span><span class="line"><span class="cl">                sudo mv gittemp/.git .
</span></span><span class="line"><span class="cl">                sudo rm -rf gittemp
</span></span><span class="line"><span class="cl">        <span class="k">fi</span>
</span></span><span class="line"><span class="cl">        <span class="nb">echo</span> <span class="s2">&#34;拉取最新的项目文件&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#sudo git reset --hard origin/$branch</span>
</span></span><span class="line"><span class="cl">        sudo git pull gitHttp 2&gt;<span class="p">&amp;</span><span class="m">1</span>
</span></span><span class="line"><span class="cl">        <span class="nb">echo</span> <span class="s2">&#34;设置目录权限&#34;</span>
</span></span><span class="line"><span class="cl">        sudo chown -R www:www <span class="nv">$gitPath</span>
</span></span><span class="line"><span class="cl">        <span class="nb">echo</span> <span class="s2">&#34;End&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="nb">exit</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span></code></pre></div><p><strong>5.</strong> 查看 WebHook 插件密钥，复制密钥地址。添加到 Github 需同步的仓库&ndash;Settings&ndash;Webhooks&ndash;Add webhook。其中 Content type 选择 application/json。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">格式如：https://面板地址:面板端口/hook?access_key=密钥&amp;param=需同步到的目录名称
</span></span></code></pre></div><p><strong>6.</strong> 初始化宝塔网站目录</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="nb">cd</span> 网站目录
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 初始化git 执行</span>
</span></span><span class="line"><span class="cl">git init
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 连接远程仓库</span>
</span></span><span class="line"><span class="cl">git remote add origin git@github.com:yourName/repositoryname.git
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 拉取想要的分支代码(gh-pages分支名称)</span>
</span></span><span class="line"><span class="cl">git pull origin gh-pages
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 等待完成</span>
</span></span></code></pre></div><p>至此，步骤全部完成。当本地提交新文件到 Github hugo 源码 main 分支，就会自动触发（hugo 生成静态文件——同步到另一个仓库——同步到宝塔网站指定目录）。如果域名指定境外访问路径是 vercel 或 cloudflare 服务，当 hugo 源码更新的时候也会自动触发构建更新。</p>
<p>详细步骤参考资料：<br />
<a href="https://juejin.cn/post/6974203582602018829" target="_blank">GitHub+webHook 实现项目代码自动更新 </a><br />
<a href="https://cloud.tencent.com/developer/article/2207775?areaSource=&traceId=" target="_blank">宝塔利用 Git + WebHook 实现与码云同步 </a></p>
<p><strong>题外</strong>: 由于使用了轻量服务器，原先备案过的域名也需要重新接入备案。整个流程下来发现，现在备案审核速度是相当的快，必须点个赞。周一提交服务商，周二服务商提交管理局，周三审核通过。周三上午提交公安网安，下午审核通过。</p>
]]></content:encoded></item><item><title>Apple TV 4K (第二代) 使用体验</title><link>https://koobai.com/apple_tv/</link><pubDate>Fri, 10 Feb 2023 00:00:00 +0000</pubDate><guid>https://koobai.com/apple_tv/</guid><description>自己喜欢观影，为了方便直接使用奈飞 (Netflix)及串流本地、网盘视频，2022年1月3号购置。目前也使用了一年多时间，整体感受就是一分钱一分货，比之前的 Google TV 不管是流畅度、系统美观度，完全都不是一个量级。特别喜欢铝制一体成型的遥控器，非常有质感，就是冬天使用冰手。</description><content:encoded><![CDATA[<img loading="lazy" decoding="async" src="https://img.koobai.com/article/appletv.webp" alt="Apple TV 4K (第二代) 使用体验" /><p>自己喜欢观影，为了方便直接使用奈飞 (Netflix)，在 2020 年时购入了 Google TV，一直使用得不错。直到买了群晖，在折腾影视串流的过程中，发现大家都推荐 Infuse 这款软件。一番了解，确实很不错，支持市面上所有的视频、音频格式，年订阅 9.9 美元，最主要的是串流的海报墙太美了～～。唯一的缺陷就是只支持 Apple 生态，其他都好说，本身电脑手机 Pad 都是 Apple，但最主要的电视观影工具 Google TV 使不上呀。纠结很久，实在受不了 Infuse 的诱惑，于是淘宝了一台 Apple TV 4k (第 2 代)。</p>
<h3 id="连接方式">连接方式</h3>
<p>Apple TV 连 Soundba 音响 ARC 接口 &gt; Soundba 连电视 eARC 接口，这样就可以，画面由电视显示、声音由 Soundba 输出。</p>
<h3 id="使用感受">使用感受</h3>
<p>2022 年 1 月 3 号买的，目前也使用了一年多时间，整体感受就是一分钱一分货，比之前的 Google TV 不管是流畅度、系统美观度，完全都不是一个量级。特别喜欢铝制一体成型的遥控器，非常有质感，就是冬天使用冰手。</p>
<p>由于家里的智能设备也通过 HomeKit 控制，Apple TV 插着直流电，也就充当作为智能中枢使用。另外有台电视不支持杜比视界，可以使用机器配合 iPhone 给电视屏幕校色。</p>
<p>目前 TV 中，常用的 App：
<img loading="lazy" decoding="async" src="https://img.koobai.com/article/netflix.webp" alt="netflix" class="img-hide" /></p>
<h3 id="1-netflix">1. Netflix</h3>
<p>买这些盒子最初的需求就是为了能使用 Netflix，喜欢它的一点：剧集基本上都是一次性放出，看起来非常爽。每年都有那么几部好看的，如：暗黑、怪奇物语、风骚律师、纸房子，最近很火的黑暗荣耀。但每个月的订阅费确实不便宜，咬牙坚持几个月后，上了合租车。</p>
<h3 id="2-youtube">2. Youtube</h3>
<p>关注了自己喜欢的几个频道，在电视上看还是很爽的，特别是订阅了会员之后，无广告。之前印度区一个月也就 6 块钱，最近开始涨价，再下去可能又得找合租车了。</p>
<h3 id="3-infuse">3. Infuse</h3>
<p>买 Apple TV 就是因为它。通过 WebDAV 的方式，串联起 Docker 应用 Alist，观影起来确实方便。到期之后，又订阅了一年，只能说 Apple 生态必备。</p>
<h3 id="4-synology-photos">4. Synology Photos</h3>
<p>群晖此应用最近才上架 Apple TV，现在各个终端设备齐全了，一家人坐在电视前浏览照片还是很爽的。不过浏览视频的时候，需要在软件设置中开启 HTTP 播放，否则无法浏览。</p>
<h3 id="5-cheers">5. Cheers</h3>
<p>Bilibili 第三方客户端，目前可加入作者的 TestFlight。自己很少看 Bilibili，一般是找什么教程的时候，上去搜索下。</p>
<p>另外还有 HBOMAX、Disnep+、Apple TV 应用，但都必须得订阅，全部加一起还是不少费用，所以直接通过 Alist 串流阿里云盘观看自己想看的。</p>
<h3 id="总结">总结</h3>
<p>由于自己喜欢观影，使用下来，这笔投资还是很划算。而且此类设备可多年不更新，所以性价比一下子就上来了。目前唯一的痛点就是，观看国内的爱奇艺、腾讯、优酷得退回电视系统，使用体验的割裂感就很强了，当然这个跟 Apple TV 没关系。</p>
<p>当时买的是 64G 版本，也不知道怎么想的，按照现在的使用情景，完全没必要，32 足已。</p>
]]></content:encoded></item><item><title>Synology 群晖 DS920+ 使用之旅</title><link>https://koobai.com/synology_ds920/</link><pubDate>Thu, 09 Feb 2023 00:00:00 +0000</pubDate><guid>https://koobai.com/synology_ds920/</guid><description>记不清是从什么时候开始了解NAS的，21年尝试过DS220+、极空间Z4，最终回归到DS920+。经过一年多的使用，机器很满意，满足了自己需求：数据备份、影视存储。但市场上NAS品牌越来越多，如华为、绿联等，以群晖的高售价低配置，曾经“买系统送机器”的流传打趣，性价比越来越低，升级款923，还是万年不变的千兆网口。</description><content:encoded><![CDATA[<img loading="lazy" decoding="async" src="https://img.koobai.com/article/synology.jpg" alt="Synology 群晖 DS920+ 使用之旅" /><p>记不清是从什么时候开始了解 NAS 的，2021 年 4 月买过一台群晖 DS220+，使用几天发现折腾起来非常麻烦，直接给退了。时间来到 2021 年末，了解到极空间 Z4，于是买回来试试，发现系统极其易用，非常喜欢。但没用几天，品牌宣布发布新款。。。，于是退了老款，等新款发售。上架之后，第一时间下单，不知为何拷贝外接硬盘内容会断连，联系品牌工程师，一番测试也无法解决，只能选择退货。京东填写退货理由是质量问题，品牌售后联系说只能选七天无理由退货，如果选择质量问题，必须退回厂里先检测，无问题就原路返回有问题就给退换。。。。京东使用了这么多年，第一次遇到品牌这种操作，一下子对极空间的好感度降至零点，退了之后就不考虑了。</p>
<p>回到重新选择 NAS 上，了解了下威联通，性价比不错，但系统界面实在是无法欣赏，只能放弃。最后好像能选的品牌也就群晖了，基于一步到位原则，咬咬牙直接在淘宝授权商购自一台 DS920+～～</p>
<h3 id="周边搭配">周边搭配</h3>
<p>机器到位，对应的搭配组合：1.送的一条 4g 内存、一套防尘罩。2.三块希捷酷狼 4T 硬盘。3.两条三星 250g SSD。4.山特 850 UPS 不间断电源。</p>
<h3 id="折腾之旅">折腾之旅</h3>
<p>准备就绪，经过一年多的折腾及稳定运行使用，满足了自己需求：<strong>数据备份、影视存储</strong>。目前主要使用的套件：
<img loading="lazy" decoding="async" src="https://img.koobai.com/article/synologyphoto.webp" alt="Synology Photos" class="img-hide" /></p>
<h3 id="1-存储管理器">1. 存储管理器</h3>
<p>三块硬盘使用逻辑：两块组 Raid 1，一块 Basic。重要数据存储在 Raid 上；极为重要数据，再通过 Hyper Backup 套件定期自动备份到 Basic 硬盘上，再定期备份到外置硬盘。影视、mac 系统备份，存储到 Basic 硬盘上。</p>
<p>两条 ssd,作为 Raid 1 的读写缓存。</p>
<h3 id="2-synology-drive">2. Synology Drive</h3>
<p>群晖的核心套件。电脑中日常工作存储文件夹通过 Synology Drive 连接，保存修改的同时自动同步备份到群晖。目前使用的笔记类应用也是选择直接存储本地的，这样就能实时备份到群晖，如：Typora、妙言。再通过 WebDAV 方式连接访问，以供其他终端设备显示。</p>
<h3 id="3-synology-photos">3. Synology Photos</h3>
<p>相册套件，跟 Eileen 两个人的手机，实时自动备份。套件的共享空间功能，能实时相互分享喜欢的照片。整体使用起来跟系统相册应用没什么差别。</p>
<h3 id="4-file-station">4. File Station</h3>
<p>这好像没什么说的，类似于 mac 下的访达、win 下的我的电脑，必用套件。</p>
<h3 id="5-迅雷">5. 迅雷</h3>
<p>只要你是会员，下载速度还是杠杠的，有些资源电脑版本无法下载，但套件能下～～。很多人会用 PD、PT，然后通过 Docker 应用自动触发下载，发现自己平常也用不上。</p>
<h3 id="6-docker">6. Docker</h3>
<p>使用 NAS 前不知道什么是 Docker，使用之后，只能说没了它，乐趣要少一大半～～目前使用的应用为 <strong>4</strong> 个：
<img loading="lazy" decoding="async" src="https://img.koobai.com/article/infuse.webp" alt="infuse影视墙" class="img-hide" /></p>
<h3 id="1-alist">1. Alist</h3>
<p>官方介绍：一个支持多种存储的文件列表程序。自己使用主要的作用是影视中转站：先把资源存储到阿里云盘 &gt; Alist 连接阿里云盘 &gt; Infuse 通过 WebDAV 方式连接 Alist，之后就愉快的观影。</p>
<h3 id="2-ddns-go">2. Ddns-go</h3>
<p>由于运营商的公网 IP 会实时变化，通过它可自动获取自己的公网 IP，并解析到对应的域名上。外网访问 NAS 必备。</p>
<h3 id="3-homeassistant">3. Homeassistant</h3>
<p>家里接入了不少小米系的智能设备，日常除了使用米家控制之外，可通过 Homeassistant 接入 HomeKit。如果是苹果的全家桶用户，使用起来非常方便，特别是打开 app 的速度比米家快了不知道有多少。</p>
<h3 id="4-vaultwarden">4. Vaultwarden</h3>
<p>密码管理工具，Bitwarden 的轻量应用。数据存储本地，全平台使用，再也不用记该死的密码了。</p>
<h3 id="总结">总结</h3>
<p>1.机器是真吸灰尘，放置环境为电视柜，在有防尘网的前提下，也必须是几个月停机清理一次。<br /> 2.硬盘运行的炒豆子声音，可能因为硬盘容量小、转速不高、机器下面也垫了缓存垫，且在有门隔绝的前提下，基本上可以忽略不计。<br /> 3.是不是应该使用四盘位，自己使用的情况看，发现是性能过剩了，220 其实已满足需求。</p>
<p>一年多使用下来，机器很满意。但目前市场上 NAS 品牌越来越多，如华为、绿联等，以群晖的高售价低配置，曾经“买系统送机器”的流传打趣，性价比越来越低，升级款 923，还是万年不变的千兆网口～～～</p>
]]></content:encoded></item><item><title>Hugo主题实现自适应布局, 及自定义字体</title><link>https://koobai.com/hugo_responsive_font/</link><pubDate>Sat, 28 Jan 2023 00:00:00 +0000</pubDate><guid>https://koobai.com/hugo_responsive_font/</guid><description>做事情的三分钟热度继续中，完善了博客的归档、标签云、平常观看的影视页面及文章页评论、标签等功能。过程很有趣及兴奋，就连大年三十都在乐此不疲的折腾着～～。由于当下移动设备为我们主要的浏览窗口，所以页面需考虑在对应的终端设备中实际的浏览体验。</description><content:encoded><![CDATA[<img loading="lazy" decoding="async" src="https://img.koobai.com/article/responsive.svg" alt="Hugo主题实现自适应布局, 及自定义字体" /><p>做事情的三分钟热度继续中，完善了博客的<a href="/archives">归档</a>、<a href="/tags">标签云</a>、<a href="/movies">平常观看的影视</a>页面及文章页评论、标签等功能。由于当下移动设备为我们主要的浏览窗口，所以页面需考虑在对应的终端设备中实际的浏览体验。</p>
<p>简单直接的方法，在页面样式表中添加@media，并在对应的尺寸范围中完善所需的样式：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-css" data-lang="css"><span class="line"><span class="cl"><span class="p">@</span><span class="k">media</span> <span class="o">(</span><span class="nt">max-width</span><span class="p">:</span><span class="nd">700px</span><span class="o">)</span><span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="c">/* 浏览器宽度尺寸小于700所呈现的样式 */</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">@</span><span class="k">media</span> <span class="nt">screen</span> <span class="nt">and</span> <span class="o">(</span><span class="nt">min-width</span><span class="p">:</span><span class="nd">700px</span><span class="o">)</span> <span class="nt">and</span> <span class="o">(</span><span class="nt">max-width</span><span class="p">:</span><span class="nd">900px</span><span class="o">)</span><span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="c">/* 浏览器宽度尺寸大于700小于900所呈现的样式 */</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">@</span><span class="k">media</span> <span class="o">(</span><span class="nt">min-width</span><span class="p">:</span><span class="nd">900px</span><span class="o">)</span><span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="c">/* 浏览器宽度尺寸大于700所呈现的样式 */</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c">/* 根据每个页面实际的呈现需要，调整尺寸或自适应的分段需求 */</span>
</span></span></code></pre></div><p>详细参数及解释参考：<a href="https://juejin.cn/post/6844903655020183565" target="_blank">利用@media screen 实现网页布局的自适应</a></p>
<h3 id="扩展">扩展</h3>
<p>之前文章中提到标题采用了&quot;得意黑&quot;开源字体，记录下如何自定义字体，在样式文件中添加：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-css" data-lang="css"><span class="line"><span class="cl"><span class="p">@</span><span class="k">font-face</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">font-family</span><span class="o">:</span> <span class="nt">SmileySans</span><span class="o">;</span> <span class="c">/* 名称自定义 */</span>
</span></span><span class="line"><span class="cl">  <span class="nt">src</span><span class="o">:</span> <span class="nt">url</span><span class="o">(</span><span class="s1">&#39;../fonts/SmileySans-Oblique.ttf.woff2&#39;</span><span class="o">)</span> <span class="nt">format</span><span class="o">(</span><span class="s1">&#39;woff2&#39;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="c">/* 建议采用woff2格式，以降低容量大小，提高加载速度 */</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>之后在需要调用此字体的样式文件中直接使用:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-css" data-lang="css"><span class="line"><span class="cl"><span class="nt">body</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">font-family</span><span class="p">:</span> <span class="n">SmileySans</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="结尾">结尾</h3>
<p>博客所需的，整体折腾得差不多了，过程很有趣及兴奋，就连大年三十都在乐此不疲的折腾着～～。随着这个年也已过完，接下来的重点也是 2023 年重点，努力挣钱～挣钱～～挣钱～～～加油。</p>
]]></content:encoded></item><item><title>Hugo主题添加暗黑(夜间)模式, 并自动切换</title><link>https://koobai.com/hugo_dark/</link><pubDate>Thu, 19 Jan 2023 00:00:00 +0000</pubDate><guid>https://koobai.com/hugo_dark/</guid><description>继续完善博客主题风格，折腾过程，备份记录留档。由于自己并不懂技术，折腾博客过程中，想实现或者解决某一想法或问题时，都需要通过搜索引擎查阅大量的资料，花大把时间，最终才能勉强得以解决或者继续无解。这就是折腾过程中的乐趣，特别是实现或解决成功的那个兴奋欣慰感～～</description><content:encoded><![CDATA[<img loading="lazy" decoding="async" src="https://img.koobai.com/article/dark.svg" alt="Hugo主题添加暗黑(夜间)模式, 并自动切换" /><p>继续完善博客主题风格，折腾过程，备份记录留档。由于自己已习惯把终端设备外观设置成自动切换浅色或深色模式，为了夜间浏览体验，博客应该支持暗黑(夜间)模式。</p>
<p>以 hugo 关键词搜索主题应该怎么适配，相关资料很少，尝试到绝望之际，换成了英文关键词，最终 Atanas Yonkov 的&quot;<a href="https://yonkov.github.io/post/add-dark-mode-toggle-to-hugo/" target="_blank">Adding Dark Mode to Hugo</a>&ldquo;拯救了自己，根据其教程，添加成功。虽不完美，但已实现，纠结两个问题：</p>
<ol>
<li>暗黑模式下，点击链接加载都会白一下再变暗。</li>
<li>不会根据终端设备模式自动切换，需要手动点击。</li>
</ol>
<p>尝试搜索解决，无果。之后发现 WorkPlusFE&rsquo;s Blog 的&rdquo;<a href="https://fe-blog.workplus.io/dark-mode-guide-on-web" target="_blank">Dark Mode</a>&ldquo;教程，又是一番折腾，最终完美解决。最简单直接方式：在 hugo 样式文件中（如：style.scss）添加</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-css" data-lang="css"><span class="line"><span class="cl"><span class="p">@</span><span class="k">media</span> <span class="o">(</span><span class="nt">prefers-color-scheme</span><span class="o">:</span> <span class="nt">dark</span><span class="o">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="c">/* 暗黑模式下css样式, 如: */</span>
</span></span><span class="line"><span class="cl">  <span class="nt">body</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">background</span><span class="p">:</span> <span class="mh">#1A1718</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>完善暗黑模式下的样式属性之后，终端设备在深色模式下会自动调用渲染主题暗黑模式下的样式表，反之浅色模式下就调用默认样式。</p>
<h3 id="扩展">扩展</h3>
<p>当然如果要做好暗黑模式，并不是简单的反黑白，需要不断尝试样式的各个配色方案，以寻求夜间浏览的实际体验。不过图片可以采用降低透明度的方式来缓解夜间过亮刺眼的问题：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-css" data-lang="css"><span class="line"><span class="cl"><span class="p">@</span><span class="k">media</span> <span class="o">(</span><span class="nt">prefers-color-scheme</span><span class="o">:</span> <span class="nt">dark</span><span class="o">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">img</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">filter</span><span class="p">:</span> <span class="nb">brightness</span><span class="p">(</span><span class="mf">0.8</span><span class="p">)</span> <span class="nb">contrast</span><span class="p">(</span><span class="mf">1.2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="感悟">感悟</h3>
<p>由于自己并不懂技术，折腾博客过程中，想实现或者解决某一想法或问题时，都需要通过搜索引擎查阅大量的资料，花大把时间，最终才能勉强得以解决或者继续无解。这就是折腾过程中的乐趣，特别是实现或解决成功的那个兴奋欣慰感～～</p>
]]></content:encoded></item><item><title>Github自动构建Hugo, 并同步到腾讯COS, 同时刷新CDN缓存</title><link>https://koobai.com/hugo_action_tencentcos/</link><pubDate>Sun, 15 Jan 2023 00:00:00 +0000</pubDate><guid>https://koobai.com/hugo_action_tencentcos/</guid><description>把二级域名改成一级，过程中发现Cloudflare Pages如果要绑定一级，须把域名的DNS服务器解析过去。解析之后，自己的nas访问变得不稳定，时不时的打不开，来来回回折腾了好几次，无解，只好改回去。 vercel可以绑定一级，尝试之后，访问速度太慢，放弃。开始了解国内的云服务，学习到了对象储存、CDN，经过一番对比尝试，最终选择腾讯云的COS对象存储配合内容分发网络CDN搭建。</description><content:encoded><![CDATA[<img loading="lazy" decoding="async" src="https://img.koobai.com/article/cdn.svg" alt="Github自动构建Hugo, 并同步到腾讯COS, 同时刷新CDN缓存" /><p>博客逐步搭建完善，更新了日常使用的<a href="https://koobai.com/apps/">App</a>、<a href="https://koobai.com/hardware/">硬件</a>页面。博客样式标题采用了&quot;<a href="https://github.com/atelier-anchor/smiley-sans" target="_blank">得意黑</a>&ldquo;开源字体。把二级域名改成一级，过程中发现 Cloudflare Pages 如果要绑定一级，须把域名的 DNS 服务器解析过去。解析之后，自己的 nas 访问变得不稳定，时不时的打不开，来来回回折腾了好几次，无解，只好改回去。 vercel 可以绑定一级，尝试之后，访问速度太慢，放弃。开始了解国内的云服务，学习到了对象储存、CDN，经过一番对比尝试，最终选择腾讯云的 COS 对象存储配合内容分发网络 CDN 搭建(主要它的 cosbrowser 界面是经过设计的 ᵔ◡ᵔ；客服也很负责，咨询问题会电话打过来详细教你如何操作)。</p>
<p>在了解部署过程中发现 Cyrus&rsquo;s Blog 写的&rdquo;<a href="https://blog.xm.mk/posts/fc83" target="_blank">自动构建 Hugo 博客部署至腾讯云对象存储 COS 并刷新 CDN</a>&ldquo;教程，一番折腾，完美。感谢作者。<br />备份记录下过程: (详细的注释可查看 Cyrus&rsquo;s Blog)</p>
<h3 id="准备工作">准备工作：</h3>
<ol>
<li>到腾讯云访问管理——访问密钥——API 密钥管理中，新建一个账户：访问方式改为&quot;编程访问&rdquo;，用户权限添加&quot;QcloudCOSDataFullControl、 QcloudCDNFullAccess&quot;。完成之后将生成的 SecretId、SecretKey 复制保存。</li>
<li>到 Github 新建一个仓库(私有公共都行)，把自己 hugo 生成的站点源文件(不是 public 下文件)同步过去。</li>
<li>在刚创建的仓库——Settings——Secrets and variables——Actions，新建 SecretId、SecretKey、Bucket、 Region 四个密钥。其中 SecretId、SecretKey 为上面复制保存的，Bucket(存储桶名称)、 Region(所属地域 )在 COS 中存储桶列表中获取。</li>
</ol>
<h3 id="部署">部署:</h3>
<ol>
<li>在 Github 仓库根目录，新建&quot;.github/workflows&quot;文件夹，并新建 xxx.yml 文件，复制以下代码到文件里。作用：借助 Github Action 实现自动部署。</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="line"><span class="cl"><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Build and deploy</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 自动触发构建</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">on</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">push</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">branches</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">main</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 构建hugo及生产静态页面</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">jobs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">deploy</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">runs-on</span><span class="p">:</span><span class="w"> </span><span class="l">ubuntu-latest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">steps</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/checkout@v3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">submodules</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">fetch-depth</span><span class="p">:</span><span class="w"> </span><span class="m">0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Setup Hugo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">peaceiris/actions-hugo@v2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">hugo-version</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;latest&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">extended</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Build</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">hugo --minify</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 上传到腾讯COS存储桶</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Setup Python</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/setup-python@v4</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">python-version</span><span class="p">:</span><span class="w"> </span><span class="m">3.9</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Setup coscmd and sdk</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">sudo pip install coscmd</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Configure coscmd</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">env</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">SECRET_ID</span><span class="p">:</span><span class="w"> </span><span class="l">${{ secrets.SecretId }}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">SECRET_KEY</span><span class="p">:</span><span class="w"> </span><span class="l">${{ secrets.SecretKey }}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">BUCKET</span><span class="p">:</span><span class="w"> </span><span class="l">${{ secrets.Bucket }}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">REGION</span><span class="p">:</span><span class="w"> </span><span class="l">${{ secrets.Region }}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">coscmd config -a $SECRET_ID -s $SECRET_KEY -b $BUCKET -r $REGION</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Upload to COS</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">coscmd upload -rfs --delete public/ /</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 刷新腾讯CDN缓存目录</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Flush CDN</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">env</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">SECRET_ID</span><span class="p">:</span><span class="w"> </span><span class="l">${{ secrets.SecretId }}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">SECRET_KEY</span><span class="p">:</span><span class="w"> </span><span class="l">${{ secrets.SecretKey }}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          pip install --upgrade tencentcloud-sdk-python
</span></span></span><span class="line"><span class="cl"><span class="sd">          python flush-dns.py -i $SECRET_ID -k $SECRET_KEY</span><span class="w">          
</span></span></span></code></pre></div><ol start="2">
<li>在 Github 仓库根目录，新建 flush-dns.py 文件，复制以下代码到文件里，并将里面的&quot;koobai.com&quot;域名修改成自己的 CDN 加速域名。作用：通过 Python 脚本实现刷新 CDN 缓存，详细参数可参考<a href="https://console.cloud.tencent.com/api/explorer?Product=cdn&Version=2018-06-06&Action=PurgePathCache" target="_blank">腾讯的调用 aip 文档</a>。</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">json</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">argparse</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">tencentcloud.common</span> <span class="kn">import</span> <span class="n">credential</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">tencentcloud.common.profile.client_profile</span> <span class="kn">import</span> <span class="n">ClientProfile</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">tencentcloud.common.profile.http_profile</span> <span class="kn">import</span> <span class="n">HttpProfile</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">tencentcloud.common.exception.tencent_cloud_sdk_exception</span> <span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">TencentCloudSDKException</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">tencentcloud.cdn.v20180606</span> <span class="kn">import</span> <span class="n">cdn_client</span><span class="p">,</span> <span class="n">models</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 传入参数</span>
</span></span><span class="line"><span class="cl"><span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="o">.</span><span class="n">ArgumentParser</span><span class="p">(</span><span class="n">description</span><span class="o">=</span><span class="s1">&#39;-i &lt;secretId&gt; -k &lt;secretKey&gt;&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">parser</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s1">&#39;-i&#39;</span><span class="p">,</span> <span class="s1">&#39;--secretid&#39;</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="nb">str</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="s1">&#39;secretId&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">parser</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s1">&#39;-k&#39;</span><span class="p">,</span> <span class="s1">&#39;--secretkey&#39;</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="nb">str</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="s1">&#39;secretKey&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">args</span> <span class="o">=</span> <span class="n">parser</span><span class="o">.</span><span class="n">parse_args</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">cred</span> <span class="o">=</span> <span class="n">credential</span><span class="o">.</span><span class="n">Credential</span><span class="p">(</span><span class="n">args</span><span class="o">.</span><span class="n">secretid</span><span class="p">,</span><span class="n">args</span><span class="o">.</span><span class="n">secretkey</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">httpProfile</span> <span class="o">=</span> <span class="n">HttpProfile</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">httpProfile</span><span class="o">.</span><span class="n">endpoint</span> <span class="o">=</span> <span class="s2">&#34;cdn.tencentcloudapi.com&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">clientProfile</span> <span class="o">=</span> <span class="n">ClientProfile</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">clientProfile</span><span class="o">.</span><span class="n">httpProfile</span> <span class="o">=</span> <span class="n">httpProfile</span>
</span></span><span class="line"><span class="cl">    <span class="n">client</span> <span class="o">=</span> <span class="n">cdn_client</span><span class="o">.</span><span class="n">CdnClient</span><span class="p">(</span><span class="n">cred</span><span class="p">,</span> <span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="n">clientProfile</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">req</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">PurgePathCacheRequest</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">params</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&#34;Paths&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34;https://koobai.com/&#34;</span><span class="p">,</span> <span class="s2">&#34;https://www.koobai.com/&#34;</span><span class="p">],</span> <span class="s2">&#34;FlushType&#34;</span><span class="p">:</span> <span class="s2">&#34;flush&#34;</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">req</span><span class="o">.</span><span class="n">from_json_string</span><span class="p">(</span><span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">params</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">resp</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">PurgePathCache</span><span class="p">(</span><span class="n">req</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">resp</span><span class="o">.</span><span class="n">to_json_string</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">except</span> <span class="n">TencentCloudSDKException</span> <span class="k">as</span> <span class="n">err</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">err</span><span class="p">)</span>
</span></span></code></pre></div><p>自此部署完毕，当有新文件上传到 main 分支，就会自动触发（hugo 生成静态文件——上传到 COS——刷新 CDN 缓存）。</p>
<h3 id="查看是否部署成功">查看是否部署成功：</h3>
<ol>
<li>Github 仓库 Actions 下，查看构建记录</li>
<li>COS 存储桶下的文件变动</li>
<li>CDN 刷新预热下，操作记录——目录刷新</li>
</ol>
<h3 id="费用">费用：</h3>
<p>COS、CDN 费用(包含存储+CDN 回源流量+CDN 流量+HTTPS 请求等)，个人站没什么流量，应该很低，跑一段时间看看。另外腾讯云也提供了六个月一部分免费试用~~</p>
<h3 id="扩展">扩展：</h3>
<p>因为博客源文件在 Github 里，可以利用 vercel 平台读取仓库也自动构建一个。如果使用的是阿里云域名 DNS 服务器，可以在解析请求来源选择&quot;境外&quot;，&ldquo;记录值&quot;填写 vercel 平台绑定域名时所提供的。</p>
<p>这样国内网络访问的时候走腾讯 CDN，国外访问的时候走 vercel 平台所提供的节点。</p>
]]></content:encoded></item><item><title>十年弹指一挥间</title><link>https://koobai.com/time/</link><pubDate>Sat, 07 Jan 2023 00:00:00 +0000</pubDate><guid>https://koobai.com/time/</guid><description>最近脑子一直在想，是不是该搭个个人站，以展示日常工作项目，方便让潜在的公司了解，从而快速建立沟通。想着想着就往博客路线走了，离上次2012年搭建博客，时间过去了10年。细想这10年少了博客的日常记录，是少了点什么。虽然当下，能记录的平台、工具多不胜数，但博客始终是记录的动力。</description><content:encoded><![CDATA[<img loading="lazy" decoding="async" src="https://img.koobai.com/article/noy.webp" alt="十年弹指一挥间" /><p>最近脑子一直在想，是不是该搭个个人站，以展示日常工作项目，方便让潜在的公司了解，从而快速建立沟通。想着想着就往博客路线走了，离上次 2012 年搭建博客，时间过去了 10 年。细想这 10 年少了博客的日常记录，是少了点什么。虽然当下，能记录的平台、工具多不胜数，但博客始终是记录的动力。</p>
<p>于是，了解了一圈搭建工具，最终使用 Hugo，搭配 GitHub <del>&amp; Cloudflare</del>来实现。搭建过程中，似乎找回了，十年前折腾博客的乐趣：选主题然后修改成自己中意的样子，很满足。</p>
<p>既然，博客已搭建，定位还是日常的生活记录（搭建过程中，翻出以前的博客备份记录，看着每篇文字，了解彼时写的感受，嗯，这应该就是记录的意义）。同时打算分享下：<a href="/apps">日常使用的软件</a>、<a href="/movies">平常观看的影视</a>、<a href="/hardware">喜欢折腾的物品</a>等。</p>
<p>十年间个人的变化，体重从一个量级跃升到另外好几个量级，头发从中间快速的退去，到干脆剃光。之前 2013 年有篇博客记录 Eileen 刚怀孕几个月，初为父母的心理活动，到今天，女儿已 9 周岁多，三年级了都，时间确实是弹指一挥间。十年前，写着刚考完路试拿驾照，买车需要等到买房了才能想。十年后，不管好不好，目标至少都实现了。</p>
<p>十年后，事业好像回到原点，又到了以前的状态。希望 2023 年借由新的博客开始，也是新事业的起点。。。。加油。。。</p>
]]></content:encoded></item><item><title>入手机械键盘路程 &amp; VIA改键注释备忘</title><link>https://koobai.com/mechanical_keyboard/</link><pubDate>Fri, 06 Jan 2023 00:00:00 +0000</pubDate><guid>https://koobai.com/mechanical_keyboard/</guid><description>2021年03月在京东购买了京造K2（Keychron K2），这是第一把机械键盘。同年12月购买了sspai × Keychron 联名的K3，买它就单纯觉得白色好看。到此，客制化三个字也没听过，时间到了22年06月，sspai × Keychron 联名出了Q1，觉得配色也蛮好看，看介绍，才知道客制化概念，觉得蛮有意思的，于是买了这把Q1回来。</description><content:encoded><![CDATA[<img loading="lazy" decoding="async" src="https://img.koobai.com/article/zoom.jpg" alt="入手机械键盘路程 & VIA改键注释备忘" /><p>2021 年 03 月在京东购买了京造 K2（Keychron K2），这是第一把机械键盘。同年 12 月购买了 sspai × Keychron 联名的 K3，买它就单纯觉得白色好看。到此，客制化三个字也没听过，时间到了 22 年 06 月，sspai × Keychron 联名出了 Q1，觉得配色也蛮好看，看介绍，才知道客制化概念，蛮有意思，于是买了这把 Q1 回来。</p>
<p>入手之后，从完全不懂，到开始改轴下垫、贴美纹纸、换卫星轴、数据线定制、VIA 自定义，还蛮有乐趣～</p>
<p>7 月份，见微博上有人说某个品牌一个小时卖了 6000 把键盘，这时才知道 Link 65。之后看到 ZOOM 65 R2 开团，几个特性促成了上车： 蓝牙、65 键 、带旋钮（用惯了 Q1 旋钮，非常方便）。</p>
<p>谈不上入坑，对雨滴、麻将、HiFi 等，也没感觉。更多是因为颜值～～
<img loading="lazy" decoding="async" src="https://img.koobai.com/article/zoombeimian.webp" alt="ZOOM 65" class="img-hide" /></p>
<h3 id="via-软件中的宏any-使用注释备忘">VIA 软件中的宏、any 使用注释备忘：</h3>
<p>完整的按键对照表参考文档：<a href="https://docs.qmk.fm/#/keycodes">https://docs.qmk.fm/#/keycodes</a><br>
LGUI = 左 cmd 键，LALT = 左 option 键，LCTL = 左 control 键，LSFT = 左 shift 键<br>
(缩写写法对应按键：G = CMD，A = Option，C = Control，S = Shift)</p>
<p>Mac 系统下 VIA 软件中的 Win = Command，Alt = Option</p>
<h3 id="1-宏使用自定义按键">1. 宏使用(自定义按键)</h3>
<p>左侧 MACROS 选项菜单为宏，宏对应 0-15 个按键<br>
写法如：{KC_LGUI,KC_C}，意思为 CMD+C<br>
写法如 2：{KC_LGUI,KC_LSFT,KC_4}，意思为 cmd+shift+4</p>
<h3 id="2-any-键使用更自主的自定义按键">2. any 键使用(更自主的自定义按键)</h3>
<p>文档：<a href="https://docs.qmk.fm/#/feature_advanced_keycodes">https://docs.qmk.fm/#/feature_advanced_keycodes</a><br>
写法如：G(KC_C) 意思为 CMD+C<br>
写法如 2：SGUI(kc_4) 意思为 cmd+shift+4</p>
<h3 id="3-any-特殊用法键盘切换层--layer-0-1-2-3-">3. any 特殊用法：键盘切换层 ( LAYER 0 1 2 3 )</h3>
<p>使用方法文档：<a href="https://docs.qmk.fm/#/feature_layers?id=switching-and-toggling-layers">https://docs.qmk.fm/#/feature_layers?id=switching-and-toggling-layers</a></p>
<h3 id="a-单击切换层">a. 单击切换层</h3>
<p>写法如：TO(0) 或 直接在软件中选择 TO(0)按键。意思为单击进入键盘第零层</p>
<h3 id="b-按住长按切换层">b. 按住（长按）切换层</h3>
<p>写法如：MO(1) 或 直接在软件中选择 MO(1)按键。意思为按住(长按)进入键盘第一层，松开回到原始层</p>
<h3 id="c-按住长按为切换层单击正常按键">c. 按住(长按)为切换层，单击正常按键</h3>
<p>写法如：LT(1,KC_C) 意思为按住(长按)进入键盘第一层，单击为字母 C</p>
<h3 id="d-按住长按为修饰键可多个组合单击正常按键">d. 按住(长按)为修饰键（可多个组合），单击正常按键</h3>
<p>修饰键为：command、optio 等等<br>
使用方法文档：<a href="https://docs.qmk.fm/#/mod_tap">https://docs.qmk.fm/#/mod_tap</a><br>
写法如：MT(MOD_LGUI,KC_C) 意思为按住为 CMD 键，单击为字母 C<br>
写法如 2：MT(MOD_LGUI|MOD_LSFT,KC_C) 意思为按住为 cmd+shift 键，单击为字母 C</p>
<h3 id="4-rgb-灯效">4. RGB 灯效</h3>
<p>文档参考：<a href="https://docs.qmk.fm/#/feature_rgblight">https://docs.qmk.fm/#/feature_rgblight</a></p>
]]></content:encoded></item></channel></rss>